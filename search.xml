<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>网络编程</title>
      <link href="/2024/10/31/Internet/"/>
      <url>/2024/10/31/Internet/</url>
      
        <content type="html"><![CDATA[<h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><p><strong>网络通信三要素</strong><br>1,IP:电子设备（计算机）在网络中的唯一标识。<br>2.端口：应用程序在计算机中的唯一标识。0~65536<br>3,传输协议：规定了数据传输的规厕<br>1,基础协议：<br>1.tcp:安全协议，三次握手。速度稍慢<br>2.udp:不安全协议。速度快</p><h1 id="服务器："><a href="#服务器：" class="headerlink" title="服务器："></a>服务器：</h1><h2 id="web服务器软件：Tomcat"><a href="#web服务器软件：Tomcat" class="headerlink" title="web服务器软件：Tomcat"></a>web服务器软件：Tomcat</h2><p>服务器：安装了服务器软件的计算机<br>服务器软件：接收用户的请求，处理请求，做出响应<br>web服务器软件：接收用户的请求，处理请求，做出响应   可部署项目，让用户通过浏览器来访问这些项目</p><h6 id="启动报错："><a href="#启动报错：" class="headerlink" title="启动报错："></a>启动报错：</h6><p>1,暴力：找到占用的端口号，并且找到对应的进程，杀死该进程netstat -ano<br>2.温柔：修改自身的端口号conf&#x2F;server.xml<br>&lt;Connector port&#x3D;”8888”protocol&#x3D;”HTTP&#x2F;1.1”<br>connectionTimeout&#x3D;”20000”<br>redirectPort&#x3D;”8445”&#x2F;&gt;</p><h6 id="5-关闭："><a href="#5-关闭：" class="headerlink" title="5.关闭："></a>5.关闭：</h6><p>1,正常关闭<br>bin&#x2F;shutdown.bat<br>ctrl+c<br>2.强制关闭：<br>*点击后动窗口的×</p><h6 id="配置："><a href="#配置：" class="headerlink" title="配置："></a>配置：</h6><p>*部署项目的方式：<br>1,直接将项目放到webapps目录下即可。<br>*&#x2F;he1lo:项目的访问路径–&gt;虚拟目录<br>简化部署：将项目打成一个war包，再将war包放置到webapps目录下<br>*war包会自动解压缩<br> 3.在conf升Catalina\localhost创建任意名称的xml文件。在文件中编写<br><Context docBase="D:\hello"/><br>*虚拟目录：xml文件的名称</p><h1 id="Servlet：server-applet"><a href="#Servlet：server-applet" class="headerlink" title="Servlet：server applet"></a>Servlet：server applet</h1><p>Servlet server applet<br>*概念：运行在服务器端的小程序<br>*Servlet就是一个接口，定义了Java类被浏览器访问到(tomcat识别)的规则<br>定义类实现接口</p><h6 id="执行原理："><a href="#执行原理：" class="headerlink" title="执行原理："></a>执行原理：</h6><p>1,当服务器接收到客户端浏览器的请求后，会解析请求URL路径，获取访问的Servlet的资源路径<br>2.查找web.xml文件，是否有对应的<url-pattern>标签体内容。<br>3.如果有，则在找到对应的<servlet-class>全类名<br>4.tomcat会将字节码文件加载进内存，并且创建其对象<br>5.调用其方法</p><h6 id="Servlet中的生命周期方法："><a href="#Servlet中的生命周期方法：" class="headerlink" title="Servlet中的生命周期方法："></a>Servlet中的生命周期方法：</h6><p>1.被创建：执行init方法，只执行一次</p><p>​在<servlet>标签下配置<br>​1,第一次被访问时，创建<br>​*<load-on-startup>的值为负数<br>​2.在服务器后动时，创建<br>​*<load-on-startup>的值为0或正整数</p><p>Servlet的init方法，只执行一次，说明一个Servlet在内存中只存在一个对象，Servlet:是单例的<br>*多个用户同时访问时，可能存在线程安全问题<br>解决：尽量不要在Servlet中定义成员变量。即使定义了成员变量，也不要对修改值<br>2.提供服务：执行service方法，执行多次每次访问Servlet时，Service方法都会被调用一次<br>3,被销毁：执行destroy,方法，只执行一次 Servlet被销毁时执行。服务器关闭时(正常关闭)，Servlet被销毁</p><h6 id="IDEA与tomcat的相关配置"><a href="#IDEA与tomcat的相关配置" class="headerlink" title="IDEA与tomcat的相关配置"></a>IDEA与tomcat的相关配置</h6><p>1.IDEA会为每一个tomcat部署的项目单独建立一份配置文件<br>查看控制台的1og:Using CATALINA_BASE:”c:\Users\fqy’.IntellijIdea2o18.1\system\tomcat\itcast”<br>2.工作空间项目<br>tomcat部署的web项目<br>tomcat真正访问的是“tomcat部署的web项目”，”tomcati部署的web项目”对应着”工作空间项目”的web目录下的所有资源<br>*WEB-INF目录下的资源不能被浏览器直接访问。<br>3,断点调试：使用”小虫子“层动dubug层动</p><h6 id="Servlet的体系结构："><a href="#Servlet的体系结构：" class="headerlink" title="Servlet的体系结构："></a>Servlet的体系结构：</h6><p>GenericServlet:将Servlet接☐中其他的方法做了默认空实现，只将service()方法作为抽象<br>*将来定义Servlet类时，可以继承GenericServlet,实现service()方法即可<br>Httpservlet:对http协议的一种封装，简化操作<br>    1.定义类继承Httpservlet<br>    2,复写doGet&#x2F;doPost方法</p><h6 id="Servlet相关配置"><a href="#Servlet相关配置" class="headerlink" title="Servlet相关配置"></a>Servlet相关配置</h6><p>1,urlpartten:Servlet访问路径<br>1,一个Servlet可以定义多个访问路径：@WebServlet({“&#x2F;d4”,”&#x2F;dd4”,”&#x2F;ddd4”})<br>2,路径定义规则：<br>    1.&#x2F;XXX<br>    2,&#x2F;XXx&#x2F;XXx:多层路径，目录结构<br>    3.*.d0</p><h1 id="HTTP："><a href="#HTTP：" class="headerlink" title="HTTP："></a>HTTP：</h1><p>概念：Hyper Text Transfer Protocol超文本传输协议<br><strong>传输协议：</strong></p><p>定义了，客户端和服务器端通信时，发送数据的格式**<br>特点：<br>1,基于TCP&#x2F;IP的高级协议<br>2.默认端口号：80<br>3.基于请求&#x2F;响应模型的：一次请求对应一次响应<br>4.无状态的：每次请求之间相互独立，不能交互数据<br>请求方式：<br>*HTTP协议有7中请求方式，常用的有2种<br>GET<br>1.请求参数在请求行中，在url后<br>2,请求的url长度有限制的<br>3,不太安全<br>POST<br>    1.请求参数在请求体中<br>    2.请求的url长度没有限制的<br>    3.相对安全<br>    <strong>2.请求头：</strong></p><p>客户端告诉浏览器的信息<br>请求头名称：请求头值<br>*常见的请求头：<br>1,User-Agent:浏览器告诉服务器，我访问你使用的浏览器版本信息<br>可以在服务器端获取该头的信息，解决浏览器的兼容性问题<br>2.Referer <a href="http://localhost/login.html">http://localhost/login.html</a><br>告诉服务器，我（当前请求）从哪里来？<br>*作用：1,防盗链2.统计工作<br>3,请求空行   空行就是用于分割PoST请求的请求头，和请求体的<br>4.请求体（正文）： 到装POST求消息的请求参数的</p><h1 id="Request："><a href="#Request：" class="headerlink" title="Request："></a>Request：</h1><p>1.request对象和response对象的原理<br>    1.request和response对象是由服务器创建的。我们来使用它们<br>    2,request.对象是来获取请求消息，response对象是来设置响应消息</p><h3 id="request功能："><a href="#request功能：" class="headerlink" title="request功能："></a>request功能：</h3><p>1,获取请求消息数据</p><h4 id="1-获取请求行数据"><a href="#1-获取请求行数据" class="headerlink" title="1.获取请求行数据"></a>1.获取请求行数据</h4><p>GET &#x2F;day14&#x2F;demo1?name&#x3D;zhangsan HTTP&#x2F;1.1<br>方法：<br>1.获取请求方式：GET<br>string getMethod()<br>2.（*)获取虚拟目录：&#x2F;day14<br>string getContextPath()<br>3.获取Servlet路径：&#x2F;demo1<br>string getservletpath()<br>4.获取get方式请求参数：name&#x3D;zhangsan<br>string getQuerystring()<br>5.获取请求URI:&#x2F;day14&#x2F;demo1<br>string getRequestURI():&#x2F;day14&#x2F;demo1<br>stringBuffer getRequestURL()<a href="http://localhost/day14/demo1">http://localhost/day14/demo1</a><br>URL:统-资源定位符：http:&#x2F;1oca1host&#x2F;day14&#x2F;demo<br>*URI:统一资源标识符：&#x2F;day14&#x2F;demo1<br>6.获取协议及版本：HTTP&#x2F;1.1<br>string getprotocol()<br>7.获取客户机的IP地址：<br>string getRemoteAddr()</p><h4 id="获取请求头："><a href="#获取请求头：" class="headerlink" title="获取请求头："></a>获取请求头：</h4><p>2,获取请求头数据<br>*方法：<br><strong>String getHeader(String name):通过请求头的名称获取请求头的值</strong><br>Enumeration<String>getHeaderNames():获取所有的请求头名称</p><h4 id="获取请求体数据："><a href="#获取请求体数据：" class="headerlink" title="获取请求体数据："></a>获取请求体数据：</h4><p>*请求体：只有POST请求方式，才有请求体，在请求体中封装了POST请求的请求参数<br>步骤：<br>1,获取流对象<br>*BufferedReader getReader():获取字符输入流，只能操作字符数据<br>ServletInputstream getInputstream():获取字节输入流，可以操作所有类型数据<br>*在文件上传知识点后讲解<br>2,再从流对象中拿数据</p><h4 id="获取请求参数通用方式-post和get都能用"><a href="#获取请求参数通用方式-post和get都能用" class="headerlink" title="获取请求参数通用方式(post和get都能用)"></a>获取请求参数通用方式(post和get都能用)</h4><p>1,string getparameter(String name):根据参数名称获取参数值<br>username&#x3D;zs&amp;password&#x3D;123<br>2,string[]getParametervalues(String name):根据参数名称获取参数值的数组hobby&#x3D;xx&amp;hobby&#x3D;game<br>3,Enumeration<string>getParameterNames():获取所有请求的参数名称<br>4.Map&lt;string,.string[]&gt;getParameterMap():获取所有参数的map集合</p><p><strong>中文乱码问题：</strong><br>get方式：tomcat8已经将get方式乱码问题解决了<br>post方式：会乱码<br>解决：在获取参数前，设置requestf的编码request.setCharacterEncoding(“utf-8”);</p><h4 id="请求转发："><a href="#请求转发：" class="headerlink" title="请求转发："></a>请求转发：</h4><p>1.步骤：<br>    1,通过request对象获取请求转发器对象：RequestDispatcher getRequestDispatcher(String path)<br>    2.使用RequestDispatcher对象来进行转发：forward(ServletRequest request,ServletResponse response)<br>2,特点：<br>    1.浏览器地址栏路径不发生变化<br>    2,只能转发到当前服务器内部资源中。<br>    3,转发是一次请求</p><h4 id="共享数据："><a href="#共享数据：" class="headerlink" title="共享数据："></a>共享数据：</h4><p>域对象：一个有作用范围的对象，可以在范围内共享数据<br>request域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据<br>方法：<br>1.void setAttribute(String name,object obj):存储数据<br>2.object getAttitude(String name):通过键获取值<br>3.void removeAttribute(String name):通过键移除键值对</p><h4 id="获取ServletContext"><a href="#获取ServletContext" class="headerlink" title="获取ServletContext:"></a>获取ServletContext:</h4><p>Servletcontext getservletcontext()</p><p>BeanUtils工具类：<br>populate(object obj,Mapmap):将map集合的键值对信息，封装到对应的]avaBean对象中</p><h2 id="response："><a href="#response：" class="headerlink" title="response："></a>response：</h2><p>响应行:<br>1,组成：协议&#x2F;版本响应状态码状态码描述<br>2,响应状态码：服务器告诉客户端浏览器本次请求和响应的一个状态。<br>1,状态码都是3位数字<br>2.分类：<br>1.1Xx:服务器就收客户端消息，但没有接受完成，等待一段时间后，发送1Xx多状态码<br>2.2Xx:成功。代表：200<br>3xx:重定向。代表：302（重定向），304（访问缓存）<br>4,4XX:客户端错误。<br>*代表：<br>*404(请求路径没有对应的资源)<br>*405:请求方式没有对应的doXxx方法<br>5,5xx:服务器端错误。代表：500（服务器内部出现异常）</p><p>响应头：<br>1.格式：头名称：值<br>2,常的响应头：<br>1.Content-Type:服务器告诉客户端本次响应体数据格式以及编码格式<br>2,Content-disposition:服务器告诉客户端以什么格式打开响应体数据<br>值：in-line:默认值，在当前页面内打开<br>        attachment;filename&#x3D;xxx:以附件形式打开响应体。文件下载<br>响应体:传输的数据</p><h3 id="Response对象"><a href="#Response对象" class="headerlink" title="Response对象"></a>Response对象</h3><p>功能：设置响应消息<br>1,设置响应行<br>1,格式：HTTP&#x2F;1,1200 ok<br>2,设置状态码<br>setstatus(int sc)<br>2,设置响应头：setHeader(String name,String value)<br>3,设置响应体：<br>*使用步骤：<br>1.获取输出流<br>字符输出流：Printwriter getwriter()<br>字节输出流：Servletoutputstream getoutputstream()<br>2.使用输出流，将数据输出到客户端浏览器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setStatus(<span class="number">302</span>);</span><br><span class="line">response.setHeader(<span class="string">&quot;location&quot;</span>,<span class="string">&quot;另一个路径&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.sendRedirect(<span class="string">&quot;location&quot;</span>,<span class="string">&quot;另一个路径&quot;</span>)</span><br></pre></td></tr></table></figure><p>重定向的特点：redirect<br>1,地址栏发生变化<br>2,重定向可以访问其他站点（服务器）的资源<br>3,重定向是两次请求。不能使用request对象来共享数据<br>转发的特点：forward<br>1,转发地址栏路径不变<br>2.转发只能访问当前服务器下的资源<br>3.转发是一次请求，可以使用request对象来共享数据<br>forward和redirect区别<br>动态获取虚拟目录：String contextPath request.getContextPath()；</p><h3 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h3><p>通过绝对路径可以确定唯一资源<br><a href="http://localhost/day15/responseDemo2">http://localhost/day15/responseDemo2</a><br>day15&#x2F;responseDemo2<br>以&#x2F;开头的路径<br>规则：判断定义的路径是给难用的？判断请求将来从哪儿发出<br>给客户端浏览器使用：需要加虚拟目录（项目的访问路径<br>*建议虚拟目录动态获取：request.getContextPath()<br><a>,<form>重定向.，<br>*给服务器使用：不需要加虚拟目录<br>转发路径<br> 注意：<br>*乱码问题：<br>1.Printwriter pw<br>response.getwriter();获取的流的默认编码是IS0-8859-1<br>2.设置该流的默认编码<br>3,告诉浏览器响应体使用的编码<br>&#x2F;&#x2F;简单的形式，设置编码，是在获取流之前设置<br>response.setContentType(“text&#x2F;html;charset&#x3D;utf-8”);</p><h3 id="ServletContex："><a href="#ServletContex：" class="headerlink" title="ServletContex："></a>ServletContex：</h3><p>获取对象：<br>&#x2F;&#x2F;1.通过request.对象获取<br>ServletContext context1&#x3D;request.getServletContext();<br>&#x2F;&#x2F;2.通过HttpServlet获取<br>ServletContext context2&#x3D;this.getServletContext();</p><p>功能：<br>1.获取MIME类型：<br>MIME类型：在互联网通信过程中定义的一种文件数据类型<br>*格式：大类型&#x2F;小类型<br>text&#x2F;html image&#x2F;jpeg<br>获取：String getMimeType(String file)<br>2,域对象：共享数据<br>1.setAttribute(string name,object value)<br>2.getAttribute(string name)<br>3.removeAttribute(string name)<br>*ServletContext对象范围：所有用户所有请求的数据<br>3,获取文件的真实（服务器路径<br>1.方法：String getRealPath(string path)</p><h2 id="会话技术："><a href="#会话技术：" class="headerlink" title="会话技术："></a>会话技术：</h2><p>1,会话：一次会话中包含多次请求和响应。<br>*一次会话：浏览器第一次给服务器资源发送请求，会话建立，直到有一方断开为止<br>2,功能：在一次会话的范围内的多次请求间，共享数据<br>3.方式：<br>1.客户端会话技术：Cookie<br>2,服务器端会话技术：Session</p><h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h4><p>1,概念：客户端会话技术，将数据保存到客户端<br>2.快速入门：<br>*使用步骤：<br>1.创建Cookie对象，绑定数据<br>new Cookie(string name,string value)<br>2,发送Cookie对象<br>response.addCookie(Cookie cookie)<br>3.获取Cookie,拿到数据<br>Cookie[]request.getcookies()</p><p>3,实现原理<br>*基于响应头set-cookie和请求头cookie:实现<br>4,cookief的细节<br>1.一次可以发送多个cookie<br><em>可以创建多个Cookie对象，使用response调用多次addCookie方法发送cookie即可。<br>2.cookie在浏览器中保存多长时间？<br>1,默认情况下，当浏览器关闭后，Cookie数据被销毁<br>2,持久化存储：<br>setMaxAge(int seconds)<br>1.正数：将Cookie数据写到硬盘的文件中。持久化存储。并指定cookie存活时间，时间到后，cookie文件自动失效<br>2,负数：默认值<br>3.零：删除cookie信息<br>3</em>在tomcat8之前cookie中不能值接存储中文数据。<br>*需要将中文数据转码—一般采用URL编码(3)<br>*在tomcat8之后，cookie支持中文数据<br>    setDomain(String path):如果设置一级域名相同，那么多个服务器之间cookie可以共享<br>5,Cookie的特点和作用<br>    1.cookie存储数据在客户端浏览器<br>    2.浏览器对于单个cookie的大小有限制(4kb)以及对同一个域名下的总cookie数量也有限制<br>*作用：<br>    1.cookie一般用于存出少量的不太敏感的数据<br>    2,在不登录的情况下，完成服务器对客户端的身份识别</p><h4 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h4><p>1,概念：服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器端的对象中。<br>2,HttpSession快速入门：<br>    1,获取Httpsession对象：<br>    Httpsession session request.getsession();<br>    2,使用HttpSession.对象：<br>    object getAttribute(string name)<br>    void setAttribute(string name,object value)<br>    void removeAttribute(string name)<br>3,原理<br>*Session的实现是依赖于Cookie的<br>4.细节：<br>1.当客户端关闭后，服务器不关闭，两次获取session默认情况下不是同一个<br>*如果需要相同，则可以创建Cookie,键为JSESSIONID,设置最大存活时间，让cookie持久化保存<br>默认实现时间为30分钟</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//选择配置修改</span></span><br><span class="line">&lt;session-config&gt;</span><br><span class="line">&lt;session-timeout&gt;<span class="number">30</span>&lt;/session-timeout&gt;</span><br><span class="line">&lt;/session-config&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cookie c <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;JSESSIONID&quot;</span>,session.getId());</span><br><span class="line">c.setMaxAge(<span class="number">60</span>*<span class="number">60</span>);</span><br><span class="line">response.addCookie(c);</span><br></pre></td></tr></table></figure><p>5.sessiont的特点<br>1,5 ession用于存储一次会话的多次请求的数据，存在服务器端<br>2.session可以存储任意类型，任意大小的数据<br>*session-与Cookie的区别：<br>1,session存储数据在服务器端，Cookie在客户端<br>2.session没有数据大小限制，Cookie有<br>3,session数据安全，Cookie相对于不安全</p><h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP:"></a>JSP:</h2><p>1.概念：<br>*]ava Server Pages:java服务器端页面<br>*可以理解为：一个特殊的页面，其中既可以指定定义html标签，又可以定义java代码<br>*用于简化书写！！！<br>2,原理<br>*JSP本质上就是一个Servlet<br>3.JSP的脚本：JsP定义Java代码的方式<br>        1.&lt;%代码%&gt;：定义的java代码，在service方法中。service方法中可以定义什么，该脚本中就可以定义什么<br>        2,&lt;%!代码%&gt;：定义的java代码，在jsp转换后的java类的成员位置。<br>        3.&lt;%&#x3D;代码%&gt;：定义的java代码，会输出到页面上。输出语句中可以定义什么，该脚本中就可以定义什么。<br>4.]SP的内置对象：<br>*在jsp页面中不需要获取和创建，可以直接使用的对象<br>*jsp一共有9个内置对象<br>request   response    out<br>*put:字符输出流对象。可以将数据输出到页面上。和response,getwriter()类似<br>*response.getwriter()和out.write()的区别：<br>*在tomcat服务器真正给客户端做出响应之前，会先找response缓冲区数据，再找out缓冲区数据<br>*response.getwriter()数据输出永远在out,.write()之前<br>内置对象：<br>在jsp页面中不需要创建，直接使用的对象<br>*一共有9个：</p><table><thead><tr><th align="center">变量名</th><th align="center">真实类型</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">pageContext</td><td align="center">PageContext</td><td align="center">当前页面共享数据，还可以获取其他内置对象</td></tr><tr><td align="center">request</td><td align="center">HttpServletRequest</td><td align="center">一次请求访问的多个资源（转发）</td></tr><tr><td align="center">session</td><td align="center">HttpSession</td><td align="center">一次会话的多个请求间共享数据</td></tr><tr><td align="center">application</td><td align="center">ServletContext</td><td align="center">所有用户间共享数据</td></tr><tr><td align="center">response</td><td align="center">HttpServletResponse</td><td align="center">响应对象，用于向客户端发送响应</td></tr><tr><td align="center">page</td><td align="center">Object</td><td align="center">当前页面(Servlet)的对象（this）</td></tr><tr><td align="center">out</td><td align="center">JspWriter</td><td align="center">输出对象，用于将数据输出到页面上</td></tr><tr><td align="center">config</td><td align="center">ServletConfig</td><td align="center">Servlet的配置对象，包含Servlet的初始化参数</td></tr><tr><td align="center">exception</td><td align="center">Throwable</td><td align="center">异常对象，仅在错误页面中可用，代表错误或异常信息</td></tr></tbody></table><h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC:"></a>MVC:</h2><p>1.M:Model,模型。JavaBean<br>*完成具体的业务操作，如：查询数据库，封装对象<br>2.V:View,视图  JSP<br>*展示数据<br>3.C:Controller,控制器。Servlet<br>*获取用户的输入<br>调用模型<br>将数据交给视图进行展示<br>*优缺点：<br>1.优点：<br>1.耦合性低，方便维护，可以利于分工协作<br>2.重用性高<br>2,缺点：<br>1,使得项目架构变得复杂，对开发人员要求高</p><h2 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h2><p>1.概念：Expression Language表达式语言<br>2,作用：替换和简化jsp页面中java代码的编写<br>3,语法：${表达式}<br>4,注意：<br>jsp默认支持el表达式的。如果要忽略el表达式<br>1,设置jsp中page指分中：isELIgnored&#x3D;”true”忽略当前jsp页面中所有的el表达式<br>I2.$(表达式)：忽略当前这个el表达式<br>5.使用：<br>1,运算：<br>    运算符：<br>    1,算数运算符：+  -  *  &#x2F;  (div)   %   (mod）<br>    2,比较运算符：</p><p>&lt;  &gt;  +  &#x3D; &lt;&#x3D;  &#x3D;&#x3D;  !&#x3D;<br>3,逻辑运算符：&amp;&amp;(and)    || (or) !(not)<br>4,空运算符：<br>empty<br>*功能：用于判断字符串、集合、数组对象是否为null并且长度是否为0<br>${fempty list} </p><p>2.获取值<br>1.e1表达式只能从域对象中获取值<br>2,语法：<br>1,(英文符号){域名称.键名}：从指定域中获取指定键的值<br>域名称：<br>1.pagescope–pagecontext<br>2.requestscope–request<br>3.sessionScope–session<br>4.applicationScope –application (ServletContext)<br>*举例：在request域中存储了name&#x3D;张三<br>    获取：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$&#123;requestScope.name&#125;</span><br></pre></td></tr></table></figure><p>​2,{键名}：表示依次从最小的域中查找是否有该键对应的值，直到找到为止<br>​3,获取对象、List集合、Map集合的值<br>​1.对象：$域名称.键名.属性名}<br>​*本质上会去调用对象的getter方法</p><p>​2.List集合：${域名称.键名[索引]}</p><p>3,Map集合：${域名称.键名.key名称}${域名称.键名[“key名称”]</p><h2 id="JSTL"><a href="#JSTL" class="headerlink" title="JSTL:"></a>JSTL:</h2><p>I,概念：]avaServer Pages Tag Library<br>JSP标准标签库<br>*是由Apache组织提供的开源的免费的jsp标签<br>&lt;标签&gt;<br>2,作用：用于简化和替换jsp页面上的java代码<br>3.使用步骤：<br>    1,导入jst1相关jar包<br>    2.引入标签库：tag1ib指今：&lt;%@taglib%&gt;<br>    3.使用标签</p><p>4.常用的]STL标签<br>1,if:相当于java代码的if语句<br>1.属性：<br>*test必须属性，接受boolean表达式<br>*如果表达式为true,则显示if标签体内容，如果为false,则不显示标签体内容<br>*一般情况下，test属性值会结合el表达式一起使用<br>2.注意：<br>*c:if标签没有else情况，想要else情况，则可以在定义一个c:if标签<br>2,choose:相当于java代码的switch语句<br>1,使用choose标签声明<br>相当于switch声明<br>2.使用when标签做判断<br>相当于case<br>3,使用otherwise标签做其他情况的声明<br>相当于default</p><p>foreach:相当于java代码的for语句<br>1.完成重复的操作<br>for(int i 0;i&lt;10;i++) {<br>属性：<br>begin:开始值<br>end:结束值<br>var:临时变量<br>step:步长<br>varStatus:循环状态对象<br>index:容器中元素的索引，从o开<br>count:循环次数，从1开始<br>2.遍历容器<br>List<User>list;<br>for(User user list){<br>*属性：<br>items:容器对象<br>var:容器中元素的临时变量<br>varStatus:循环状态对象<br>index:容器中元素的索引，从g开始<br>count:循环次数，从1开始</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库</title>
      <link href="/2024/10/31/idea%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%EF%BC%9A/"/>
      <url>/2024/10/31/idea%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%EF%BC%9A/</url>
      
        <content type="html"><![CDATA[<h3 id="idea与数据库连接："><a href="#idea与数据库连接：" class="headerlink" title="idea与数据库连接："></a>idea与数据库连接：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">         Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<span class="comment">//可不写</span></span><br><span class="line">         conn = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql:///s1&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">         <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into student1 values(9,&#x27;爱学习&#x27;,18,&#x27;男&#x27;,&#x27;衡水&#x27;,100)&quot;</span>;<span class="comment">//要对数据库中表进行的操作</span></span><br><span class="line">         stmt = conn.createStatement();</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> stmt.executeUpdate(sql);<span class="comment">//不同结构化查询语言返回不同值</span></span><br><span class="line">        System.out.println(count);</span><br><span class="line">        <span class="keyword">if</span> (count&gt;<span class="number">0</span>)&#123;<span class="comment">//对操作加以解释</span></span><br><span class="line">            System.out.println(<span class="string">&quot;添加成功&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;添加失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (stmt!=<span class="literal">null</span>)&#123;</span><br><span class="line">            stmt.close();&#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (conn!=<span class="literal">null</span>)&#123;</span><br><span class="line">            conn.close();&#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//3.定义sq1</span></span><br><span class="line">String sql <span class="string">&quot;select from account&quot;</span>;</span><br><span class="line"><span class="comment">//4.获取执行sq1对象</span></span><br><span class="line">stmt=conn.createStatement();</span><br><span class="line">/<span class="number">5.</span>执行sq1</span><br><span class="line">rs=stmt.executeQuery(sql);</span><br><span class="line"><span class="comment">//6.处理结果</span></span><br><span class="line"><span class="keyword">while</span>(rs.next())&#123;<span class="comment">//循环判断游标是否是最后一行末尾</span></span><br><span class="line"><span class="type">int</span> id=rs.getInt(columnIndex:<span class="number">1</span>);<span class="comment">//6获取数据</span></span><br><span class="line">String name=rs.getstring(columnLabe:<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="type">double</span> balance=rs.getDouble(columnIndex:<span class="number">3</span>);</span><br><span class="line">System.out.println(id +<span class="string">&quot;---&quot;</span>name <span class="string">&quot;---&quot;</span>balance);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">jdbc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;test2&gt; list =<span class="keyword">new</span> <span class="title class_">jdbc</span>().findAll();</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> List&lt;test2&gt; <span class="title function_">findAll</span><span class="params">()</span>&#123;</span><br><span class="line">        ResultSet rs=<span class="literal">null</span>;</span><br><span class="line">        Statement stmt=<span class="literal">null</span>;</span><br><span class="line">        Connection conn=<span class="literal">null</span>;</span><br><span class="line">        List&lt;test2&gt; list=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">            conn = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql:///s2&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">           String sql=<span class="string">&quot;select * from student&quot;</span>;</span><br><span class="line">             stmt = conn.createStatement();</span><br><span class="line">             rs = stmt.executeQuery(sql);</span><br><span class="line">            test2 test2=<span class="literal">null</span>;</span><br><span class="line">             list =<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;test2&gt;();</span><br><span class="line">            <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">ename</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;ename&quot;</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">jobid</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;jobid&quot;</span>);</span><br><span class="line">                <span class="type">double</span> <span class="variable">score</span> <span class="operator">=</span> rs.getDouble(<span class="string">&quot;score&quot;</span>);</span><br><span class="line">                test2 = <span class="keyword">new</span> <span class="title class_">test2</span>();</span><br><span class="line">                test2.setId(id);</span><br><span class="line">                test2.setEname(ename);</span><br><span class="line">                test2.setJobid(jobid);</span><br><span class="line">                test2.setScore(score);</span><br><span class="line">                list.add(test2);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (rs!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    rs.close();&#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (stmt!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    stmt.close();&#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (conn!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    conn.close();&#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>。有一定的ava基础知识<br>。基础语法<br>。面向对象思想<br>oJDK常用API:字符串、集合、IO<br>·网络编程<br>·热爱编程<br>·SSM框架：简化web开发的经典框架<br>·SpringBoot:简化Spring开发的框架<br>·SpringCloud:微服务开发解决方案<br>。各种中间件技术：<br>o Redis<br>MongoDB<br>RabbitMQ<br>o ElasticSearch<br>。容器技术：Docker<br>·业务解决方案</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C++语法基础</title>
      <link href="/2024/10/31/C++%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%EF%BC%9A/"/>
      <url>/2024/10/31/C++%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%EF%BC%9A/</url>
      
        <content type="html"><![CDATA[<h1 id="C-语法基础："><a href="#C-语法基础：" class="headerlink" title="C++语法基础："></a>C++语法基础：</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure><p>字符：char ‘a’<br>单精度浮点数：float 1.25e2<br>long long （输入输出为lld）   long double<br>1Byte &#x3D;8bit<br>scanf中<br>%c会读入空格  注意过滤空格<br>%d不会<br>cin会帮助过滤空格<br>cin&gt;&gt;  cout&lt;&lt;;  &lt;&lt;endl;<br>printf(“%”, ); scanf(“%”&amp; ,&amp; );<br>控制cout的精度：cout&lt;&lt;setprecision(数字)&lt;&lt;  &lt;&lt;endl;</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">double</span> num = <span class="number">3.1415926</span>;</span><br><span class="line">    std::cout &lt;&lt; std::fixed &lt;&lt; std::<span class="built_in">setprecision</span>(<span class="number">2</span>) &lt;&lt; num &lt;&lt; std::endl;</span><br><span class="line">    <span class="comment">// std::fixed表示以固定点格式输出（小数点后的位数固定），std::setprecision(2)表示保留2位小数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子cout&lt;&lt;setprecision(5)&lt;&lt;12.56666&lt;&lt;endl;结果为12.566</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>:%d</span><br><span class="line"><span class="type">float</span>:%f</span><br><span class="line"><span class="type">double</span>:%<span class="number">1</span>f</span><br><span class="line"><span class="type">char</span> %c</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> %lld</span><br></pre></td></tr></table></figure><p>++ – +&#x3D; -+<br>数据类型之间的转换：<br>char 转换为int （参考阿斯卡码表）</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">求π时有些语言中 (<span class="number">4</span>/<span class="number">3</span>)无法得到 <span class="number">1.3333</span>…，建议在公式中使用 (<span class="number">4</span>/<span class="number">3.0</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>模电与数电</title>
      <link href="/2024/10/31/%E6%A8%A1%E7%94%B5%E7%AC%94%E8%AE%B0%EF%BC%9A/"/>
      <url>/2024/10/31/%E6%A8%A1%E7%94%B5%E7%AC%94%E8%AE%B0%EF%BC%9A/</url>
      
        <content type="html"><![CDATA[<h1 id="模电笔记："><a href="#模电笔记：" class="headerlink" title="模电笔记："></a>模电笔记：</h1><h6 id="能量守恒"><a href="#能量守恒" class="headerlink" title="能量守恒"></a>能量守恒</h6><p>关联方向和非关联方向<br>怎么判断电源和负载：<br>依据电压电流的实际方向<br>方向一致，吸收功率为负载   相反则为电源<br>计算电功率 p&#x3D;UI （关联参考）为正表示吸收功率为负载  为负则产生为电源</p><h4 id="基尔霍夫定律："><a href="#基尔霍夫定律：" class="headerlink" title="基尔霍夫定律："></a>基尔霍夫定律：</h4><p>支路、结点、回路、网孔</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">电路中任一节点上所有支路电流的代数和为零，即 Σi=0</span><br><span class="line">在电路的任何一个回路中，沿一方向绕行一周时各部分电压的代数和为零，即∑u=0</span><br></pre></td></tr></table></figure><h4 id="三极管："><a href="#三极管：" class="headerlink" title="三极管："></a>三极管：</h4><p>P-N-P型：<br>e：发射区 b：基级 c：集电区(收集电子 大)<br><img src="C:/Users/23287/AppData/Roaming/Typora/typora-user-images/image-20241031111853839.png" alt="image-20241031111853839"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Javase基础</title>
      <link href="/2024/10/09/JRE%20(Java%20Runtime%20Environment)/"/>
      <url>/2024/10/09/JRE%20(Java%20Runtime%20Environment)/</url>
      
        <content type="html"><![CDATA[<h3 id="JRE-Java-Runtime-Environment"><a href="#JRE-Java-Runtime-Environment" class="headerlink" title="JRE (Java Runtime Environment)"></a><strong>JRE (Java Runtime Environment)</strong></h3><p>是Java程序的<strong>运行时</strong>环境，包含JVM（JVM可保证Java跨平台）和运行时所需要的<strong>核心类库</strong></p><h3 id="JDK-Java-Development-Kit"><a href="#JDK-Java-Development-Kit" class="headerlink" title="JDK (Java Development Kit)"></a>JDK (Java Development Kit)</h3><p>是java程序开发工具包，包含<strong>JRE</strong>和<strong>开发人员使用的工具</strong>。<br>其中的开发工具：<strong>编译工具</strong>(javac.exe)和<strong>运行工具</strong>java.exe</p><h3 id="javase学习"><a href="#javase学习" class="headerlink" title="javase学习"></a><img src="https://ts4.cn.mm.bing.net/th?id=OSAAS.D8CE0A36BF5600CBE0F94BA7702AFA72&w=72&h=72&c=17&rs=1&o=6&pid=5.1" alt="img">javase学习</h3><p><strong>java程序必须放在一个类中：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 class 类名&#123;</span><br><span class="line"></span><br><span class="line">程序代码</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**Alt+Insert:可以帮忙写代码     ALT加ENTER **   </p><h4 id="错误事例-："><a href="#错误事例-：" class="headerlink" title="&#x3D;&#x3D;错误事例 ：&#x3D;&#x3D;"></a><u><em>&#x3D;&#x3D;错误事例 ：&#x3D;&#x3D;</em></u></h4><ol><li><p>连续字符串不能分两行写但可以用<strong>加号</strong>连接</p></li><li><p>中英文，大小写</p></li><li><p>不同编码格式</p></li><li><p>出现了一个“已到达文件末尾”错误。这通常是由于在代码中缺少一个或多个结束括号“}”导致的</p></li><li><p>}在终端输入时有Random.java:1: 错误: 已在该编译单元中定义Random import java.util.Random;这个错误是因为类名与java.util包中的Random类冲突了 </p></li><li><p>ArrayIndexOutofBoundsException索引越界     NullPointerException空指针异常</p></li><li><p>引用类型的地址变换对应的值的变换</p></li><li><p>注意赋值运算符(&#x3D;)与等于运算符(&#x3D;&#x3D;)</p></li><li><p>&#x3D;&#x3D;泛型和实际类型&#x3D;&#x3D;</p></li><li><p>构造函数不继承需要方法重写</p></li><li><p>文件名与类名一致</p></li><li><p>记得主程序要psvm（main函数）</p></li><li><p>复制粘贴后看看是否有对象的变动</p></li><li><p>&#x3D;&#x3D;命名不要与内置类起冲突&#x3D;&#x3D;</p></li><li><p>子类只能继承父类的 public，protected 和同一个包中的 package 级的成员。</p></li><li><p>java不需要free，jva会自动回收清理</p></li><li><p>BufferedReader br new BufferedReader(new InputStreamReader(System.in));键盘输入经转换流和缓冲流</p></li><li><p>BufferedReader br new BufferedReader(new InputStreamReader(s.getInputStream()));获取输入流</p></li><li><p>BufferedReader可以使用读一行的方法</p></li><li><p>抛出异常只能在main函数下 </p></li><li><p>private static void useEatable(Eatable e)其中Eatable为接口</p></li><li><p>Runnable r&#x3D;（)-&gt;System.out.println(“Lambda表达式”)； new Thread(r).start();使用Lambda表达式来创建并启动一个新的线程</p></li><li><p>new Thread(()-&gt;System.out.println(“Lambda表达式”)).start();同上</p></li><li><p>类实现两个具有相同方法名的接口调用方法时必须重写</p></li><li><pre><code class="java">int a=2;/a(2)m1(a);//System.out.println(a);public static void m1(int b)&#123;b=3;&#125;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line">27. </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">对于7的解释</span><br><span class="line">Student student1 = new Student(&quot;张三&quot;, 20);  </span><br><span class="line">Student student2 = student1; // 此时student1和student2指向同一个对象  </span><br><span class="line">  </span><br><span class="line">// 更改student1所引用对象的属性  </span><br><span class="line">student1.setName(&quot;李四&quot;);  </span><br><span class="line">  </span><br><span class="line">// 由于student2仍然指向同一个对象，因此student2.getName()也会返回&quot;李四&quot;  </span><br><span class="line">System.out.println(student2.getName()); // 输出：李四  </span><br><span class="line">  </span><br><span class="line">// 如果改变student2的地址，使其指向一个新的Student对象  </span><br><span class="line">student2 = new Student(&quot;王五&quot;, 22);  </span><br><span class="line">  </span><br><span class="line">// 此时student1和student2不再指向同一个对象  </span><br><span class="line">// 对student2所引用对象的修改不会影响到student1所引用的对象  </span><br><span class="line">student2.setName(&quot;赵六&quot;);  </span><br><span class="line">System.out.println(student1.getName()); // 输出：李四  </span><br><span class="line">System.out.println(student2.getName()); // 输出：赵六</span><br></pre></td></tr></table></figure></code></pre></li></ol><p><img src="https://www.runoob.com/wp-content/uploads/2013/12/662E827A-FA32-4464-B0BD-40087F429E98.jpg" alt="img"></p><h3 id="基础语法："><a href="#基础语法：" class="headerlink" title="基础语法："></a>基础语法：</h3><h4 id="访问修饰符："><a href="#访问修饰符：" class="headerlink" title="访问修饰符："></a>访问修饰符：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> 修饰的成员只能在其所在的类内部被访问和修改，不能被任何其他类访问（包括子类） 常用于隐藏类的内部实现细节，保护数据不被外部类随意修改(私有的同一个类下)</span><br><span class="line"><span class="keyword">default</span>（包级私有）没有使用任何访问修饰符的成员具有包级私有的访问权限，即它们只能被同一个包内的类访问。(同一个包下)</span><br><span class="line"><span class="keyword">protected</span> 修饰的成员可以被同一包内的类以及不同包内的子类访问  用于实现某些功能，这些功能需要被子类继承或访问，但不需要被包外的非子类访问(同一个包或子类)</span><br><span class="line"><span class="keyword">public</span> 修饰的成员可以被任何类访问，无论这些类位于哪个包中</span><br></pre></td></tr></table></figure><h4 id="注释"><a href="#注释" class="headerlink" title="注释:"></a>注释:</h4><p>单行注释:&#x2F;&#x2F;  多行注释&#x2F;* *&#x2F;<br>文档注释：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*<span class="doctag">@author</span></span></span><br><span class="line"><span class="comment">*<span class="doctag">@version</span></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="关键字："><a href="#关键字：" class="headerlink" title="关键字："></a>关键字：</h4><ul><li><p>关键字全部小写</p></li><li><p>有特殊颜色标记</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">被<span class="keyword">static</span>修饰的变量称为静态变量。静态变量属于类，而不属于类的任何实例对象。多个对象共享同一个静态变量。可以通过类名直接调用，而不需要创建对象。通过类名点变量名或者方法名调用</span><br></pre></td></tr></table></figure></li></ul><h4 id="常量："><a href="#常量：" class="headerlink" title="常量："></a>常量：</h4><p>字符串（双引号）整数 小数（浮点型） 字符（单引号） 布尔（false&#x2F;true） 空常量（null）<br>空常量不能直接输出</p><h4 id="数据类型："><a href="#数据类型：" class="headerlink" title="数据类型："></a>数据类型：</h4><p>B KB MB GB TB</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">类（Class）：Java是一种面向对象的编程语言，类是其核心概念之一。类是创建对象的模板，它定义了对象的属性和方法。</span><br><span class="line">接口（Interface）：接口是一种特殊的类，它完全由抽象方法（即没有实现的方法）和常量组成。接口是一种形式上的契约，任何实现接口的类都必须实现接口中声明的所有方法。</span><br><span class="line">数组（Array）：数组是一种可以存储固定大小的同类型元素的容器。数组中的每个元素都可以通过索引来访问。</span><br><span class="line">枚举（Enum）：枚举类型是一种特殊的类，用于定义常量。使用枚举可以使代码更加清晰、类型安全。</span><br><span class="line">注解（Annotation）：注解是一种应用于类、方法、参数、变量等元素的特殊标记，它们不直接影响程序的运行，但可以被编译器或运行时环境用来生成代码、处理元数据等。</span><br><span class="line">字符串（String）：虽然字符串在Java中被特别对待，但它实际上是一个类。String 类在 java.lang 包中，不需要显式导入即可使用。</span><br></pre></td></tr></table></figure><p><img src="C:/Users/23287/AppData/Roaming/Typora/typora-user-images/image-20240708163823454.png" alt="image-20240708163823454"></p><p><img src="C:/Users/23287/AppData/Roaming/Typora/typora-user-images/image-20240708164207079.png" alt="image-20240708164207079"></p><h4 id="变量："><a href="#变量：" class="headerlink" title="变量："></a>变量：</h4><p> 例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">System.out.println(a);</span><br></pre></td></tr></table></figure><p>定义变量时：整数默认int类型 浮点型默认double <strong>（注意默认类型的取值范围）</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> l=<span class="number">100000000000L</span>;</span><br></pre></td></tr></table></figure><ul><li><p>名字不能重复</p></li><li><p>变量未赋值，不能使用</p></li><li><p>Long类型的变量定义的时候，为了防止整数过大，后面要加L或l</p></li><li><p>float类型的变量定义的时候，为了防止类型<strong>不兼容</strong>，后面要加以F或f<br>变量需要在他的作用域内才可以使用 通常在一对大括号内</p></li></ul><h4 id="标识符："><a href="#标识符：" class="headerlink" title="&#x3D;&#x3D;标识符：&#x3D;&#x3D;"></a>&#x3D;&#x3D;标识符：&#x3D;&#x3D;</h4><p>数字字母下划线和英文$ 其中不能以数字开头<br>小驼峰（方法、变量）：首字母小写·大驼峰（类）：首字母大写</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">命名规则：</span><br><span class="line">包名的字母一律小写，如cn.itheima</span><br><span class="line">类名或接口名每个单词首字母要大写</span><br><span class="line">常量单词每个字母都要大写单词之间用下划线连接</span><br><span class="line">变量名和方法名：lineNumber  getLineNumber</span><br><span class="line">使用对应有意义的单词命名    </span><br></pre></td></tr></table></figure><h4 id="自动类型转换："><a href="#自动类型转换：" class="headerlink" title="自动类型转换："></a>自动类型转换：</h4><p><img src="C:/Users/23287/AppData/Roaming/Typora/typora-user-images/image-20240708172826665.png" alt="image-20240708172826665"></p><h4 id="强制类型转换："><a href="#强制类型转换：" class="headerlink" title="强制类型转换："></a>强制类型转换：</h4><p>目标数据类型 变量名&#x3D;（目标数据类型）值或变量(不建议有时会有数据丢失)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> k=(<span class="type">int</span>)<span class="number">88.88</span>;</span><br></pre></td></tr></table></figure><p>表达式类型自动提升：运算时自动类型转换 有可能报错</p><h4 id="算数运算符："><a href="#算数运算符：" class="headerlink" title="算数运算符："></a>算数运算符：</h4><p>++ – ** &#x2F;&#x2F; %%<br>整数相除为整 有小数必须有浮点型参与</p><h4 id="字符的“-”运用（ascll码表）："><a href="#字符的“-”运用（ascll码表）：" class="headerlink" title="字符的“+”运用（ascll码表）："></a>字符的“+”运用（ascll码表）：</h4><p>算术表达式中包含多个基本数据类型的值的时候，整个算术表达式的类型会自动进行提升<br>提升规则：</p><ul><li>byte类型，shorta类型和char类型将被提升到int类型</li><li>整个表达式的类型自动提升到表达式中最高等级操作数同样的类型</li><li>等级顺序：byte,short,char→int→long→float→double</li></ul><h4 id="字符串的“-”：拼接"><a href="#字符串的“-”：拼接" class="headerlink" title="字符串的“+”：拼接"></a>字符串的“+”：拼接</h4><p>按顺序运算</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;itheima&quot;</span>+<span class="number">666</span></span><br><span class="line"><span class="number">1</span>+<span class="number">99</span>+<span class="string">&quot;年黑马&quot;</span><span class="number">100</span><span class="string">&quot;年黑马&quot;</span></span><br><span class="line"><span class="string">&quot;黑马&quot;</span>+<span class="number">1</span>+<span class="number">99</span><span class="string">&quot;黑马199&quot;</span></span><br></pre></td></tr></table></figure><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><h4 id="自增自减："><a href="#自增自减：" class="headerlink" title="自增自减："></a>自增自减：</h4><ul><li>单独使用的时候，++和-一无论是放在变量的前边还是后边，结果是一样的。</li><li>参与操作的时候，如果放在变量的后边，先拿变量参与操作，后拿变量做++或者–。</li><li>参与操作的时候，如果放在变量的前边，先拿变量做++或者-，后拿变量参与操作。</li></ul><h4 id="关系运算符："><a href="#关系运算符：" class="headerlink" title="关系运算符："></a>关系运算符：</h4><p>&#x3D;&#x3D; !&#x3D;······结果为true或false</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(i=j);</span><br></pre></td></tr></table></figure><p>把j的值赋值给i并输出i</p><h4 id="逻辑运算符："><a href="#逻辑运算符：" class="headerlink" title="逻辑运算符："></a>逻辑运算符：</h4><p>&amp; | ^(逆)  ！(^为异或 两者不一样才为true)</p><h4 id="短路逻辑运算符"><a href="#短路逻辑运算符" class="headerlink" title="短路逻辑运算符"></a>短路逻辑运算符</h4><p>&amp;&amp;（前false后边语句不执行）||（前true后边语句不执行）</p><h4 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h4><p>格式：关系表达式？表达式1：表达式2；首先计算关系表达式的值<br>如果值为true,表达式1的值就是运算结果<br>如果值为false,表达式2的值就是运算结果</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> max=a&gt;b?a:b;</span><br><span class="line">System.out.println(<span class="string">&quot;max:&quot;</span>+max);</span><br></pre></td></tr></table></figure><h4 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h4><h5 id="if语句："><a href="#if语句：" class="headerlink" title="if语句："></a>if语句：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(关系语句)&#123;</span><br><span class="line">语句体；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>首先计算关系表达式的值</li><li>如果关系表达式的值为true就执行语句体</li><li>如果关系表达式的值为false就不执行语句体</li><li>继续执行后面的语句内容</li></ul><h5 id="if-else语句"><a href="#if-else语句" class="headerlink" title="if else语句"></a>if else语句</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(关系表达式)&#123;</span><br><span class="line">语句体<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">语句体<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>首先计算关系表达式的值</li><li>如果关系表达式的值为true就执行语句体1</li><li>如果关系表达式的值为false就执行语句体2</li><li>继续执行后面的语句内容</li></ul><h5 id="if-else-if语句"><a href="#if-else-if语句" class="headerlink" title="if else if语句"></a>if else if语句</h5><h5 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line"><span class="keyword">case</span>值<span class="number">1</span>：</span><br><span class="line">语句体<span class="number">1</span>；</span><br><span class="line"><span class="keyword">break</span>；</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        语句体n+<span class="number">1</span>;</span><br><span class="line">        [<span class="keyword">break</span>;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="for循环语句"><a href="#for循环语句" class="headerlink" title="for循环语句"></a>for循环语句</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化语句;条件判断语句;条件控制)&#123;</span><br><span class="line">循环体；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>①执行初始化语句<br>②执行条件判断语句，看其结果是true还是false</p><ul><li><p>如果是false,循环结束</p></li><li><p>如果是true,继续执行</p></li><li><p>③执行循环体语句<br>④执行条件控制语句<br>⑤回到②继续<br><strong>在循环结构中的变量不可再次在循环体外使用</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br></pre></td></tr></table></figure><p>i不能再使用；</p><h5 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(条件判断)&#123;</span><br><span class="line">循环体语句；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="do-while语句"><a href="#do-while语句" class="headerlink" title="do while语句"></a>do while语句</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">循环体语句；</span><br><span class="line">条件控制；</span><br><span class="line">&#125;<span class="keyword">while</span>（条件判断语句）；</span><br></pre></td></tr></table></figure><p><strong>无论怎样循环都会先执行一次</strong></p><h5 id="跳转控制语句"><a href="#跳转控制语句" class="headerlink" title="跳转控制语句"></a>跳转控制语句</h5><p>continue break</p><h5 id="循环嵌套"><a href="#循环嵌套" class="headerlink" title="循环嵌套"></a>循环嵌套</h5><p><strong>random(随机获取一个随机数)</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br></pre></td></tr></table></figure><p>2中r为变量名，可以变化3中number可变化 10指的是0&lt;&#x3D;number&lt;10</p></li></ul><h3 id="IDEA的使用"><a href="#IDEA的使用" class="headerlink" title="IDEA的使用"></a>IDEA的使用</h3><h4 id="项目-模块-包的创建"><a href="#项目-模块-包的创建" class="headerlink" title="项目 模块 包的创建"></a>项目 模块 包的创建</h4><p>①创建一个空项目JavaSE Code)<br>②<br>创建一个新模块(idea test)<br>③<br>在idea test模块下的src下创建一个包(com.itheima)<br>④<br>在com.itheima包下新建一个类(HelloWorld)<br>⑤<br>在HelloWorld类中编写代码<br>在idea中执行程序</p><h5 id="内容辅助键和快捷键"><a href="#内容辅助键和快捷键" class="headerlink" title="内容辅助键和快捷键"></a>内容辅助键和快捷键</h5><p>注释：</p><ol><li>单行：crtl+&#x2F; 重复取消</li><li>多行：crtl+shift+\</li></ol><p>格式化：crtl+Alt+L</p><p>&#x3D;&#x3D;<strong>快速生成main（）：psvm加enter<br>快速生成输出语句：sout加enter</strong>&#x3D;&#x3D;</p><p>CtrL+ALt+space(内容提示，代码补全等)</p><h5 id="数据输入："><a href="#数据输入：" class="headerlink" title="数据输入："></a>数据输入：</h5><ol><li>导包(import java.util.Scanner;)</li><li>创建对象(Scanner sc&#x3D;new Scanner(Systrm.in))</li><li>接收数据(int i&#x3D;sc.nextInt();) 调用数据对象方法时可快捷键(Ctrl+Alt+V)</li></ol><h3 id="数组-引用类型"><a href="#数组-引用类型" class="headerlink" title="数组(引用类型)"></a>数组(引用类型)</h3><h4 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h4><p>数据类型[] 变量名 例：int[] arr (定义了一个int类型的数组，数组名是arr)</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>动态：动态初始化：初始化时只指定数组长度，由系统为数组分配初始值<br>            格式：数据类型[]变量名&#x3D;new<br>            数据类型[数组长度]：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> []arr <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br></pre></td></tr></table></figure><p>静态初始化：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] arr=&#123;  &#125;</span><br></pre></td></tr></table></figure><h3 id="Java中内存分配"><a href="#Java中内存分配" class="headerlink" title="Java中内存分配"></a>Java中内存分配</h3><p>栈内存：存储局部变量<br>堆内存：存储new出来的内容（实体、对象）</p><h3 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">一些有用的方法：</span><br><span class="line">random生成一个随机数</span><br><span class="line"><span class="type">int</span> <span class="variable">bound</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">randomIntInRange</span> <span class="operator">=</span> random.nextInt(bound);</span><br><span class="line">Compareto</span><br><span class="line">compareTo方法的定义为：<span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(T o)</span>，其中T是实现该接口的对象类型。</span><br><span class="line">该方法返回一个整数值：</span><br><span class="line">如果当前对象小于参数对象，返回负整数。</span><br><span class="line">如果当前对象等于参数对象，返回 <span class="number">0</span>。</span><br><span class="line">如果当前对象大于参数对象，返回正整数。</span><br><span class="line">在 Java 中，Collections.sort(students)的意思是对students集合进行排序</span><br><span class="line">直接调用Math.random()方法即可获得一个 <span class="number">0</span> 到 <span class="number">1</span> 之间的随机双精度浮点数。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>方法(method)是将具有独立功能的代码块组织成为一个整体，使其具有特殊功能的代码集</p><p>&#x3D;&#x3D;<strong>两个明确：<br>返回值类型<br>参数</strong>&#x3D;&#x3D;</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> 返回值类型 方法名 (参数)&#123;</span><br><span class="line">方法体;</span><br><span class="line"><span class="keyword">return</span> 数据；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h4><p>多个方法在同一个类中<br>多个方法具有相同的方法名<br>多个方法的参数（参数列表）不相同，类型不同或者数量不同</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodDemo</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">float</span> <span class="title function_">fn</span><span class="params">(<span class="type">int</span> a)</span>&#123;</span><br><span class="line">/<span class="number">1</span>方法体</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fn</span><span class="params">(<span class="type">int</span> a <span class="type">int</span> b)</span>&#123;</span><br><span class="line">/<span class="number">1</span>方法体</span><br></pre></td></tr></table></figure><h4 id="方法的参数传递"><a href="#方法的参数传递" class="headerlink" title="方法的参数传递"></a>方法的参数传递</h4><p>对于基本数据类型的参数，形式参数的改变，<strong>不影响实际参数的值</strong><br>对于<strong>引用类型</strong>的参数，形式参数的改变，**影响实际参数的值 **</p><h4 id="构造方法-一种特殊的方法"><a href="#构造方法-一种特殊的方法" class="headerlink" title="构造方法(一种特殊的方法):"></a>构造方法(一种特殊的方法):</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> clss 类名&#123;</span><br><span class="line">修饰符 类名(参数)&#123;</span><br><span class="line">·····</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(参数)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>构造方法的注意事项<br>①构造方法的创建<br>如果没有定义构造方法，系统将给出一个默认的无参数构造方法<br>如果定义了构造方法，系统将不再提供默认的构造方法<br>②<br>构造方法的重载<br>如果自定义了带参构造方法，还要使用无参数构造方法，就必须再写一个无参数构造方法</strong></p><p><strong>推荐的使用方式<br>无论是否使用，都手动书写无参数构造方法</strong><br><strong>方法引用：</strong>“：：”方法引用符</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">方法名(System.out::println);</span><br></pre></td></tr></table></figure><p><strong>引用类方法：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer::parselnt</span><br></pre></td></tr></table></figure><p>将String转换为int类型<br><strong>引用对象的实例方法：</strong>引用类中的成员方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;Helloword&quot;</span>::toUpperCase<span class="comment">//将此String所有字符转换为大写</span></span><br></pre></td></tr></table></figure><p><strong>引用对象的实例方法：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String::substring</span><br></pre></td></tr></table></figure><p><strong>引用构造器：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">类名::<span class="keyword">new</span></span><br><span class="line"><span class="title class_">Student</span>::<span class="keyword">new</span></span><br></pre></td></tr></table></figure><p><strong>函数式接口作为方法的参数：</strong><br>如果方法的参数是一个函数式接口，我们可以使用Lambda表达式作为参数传递</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">startThread(O-&gt;System.out.println(Thread.currentThread(.getName0+<span class="string">&quot;线程启动了&quot;</span>)；</span><br></pre></td></tr></table></figure><p><strong>函数式接口作为方法的返回值：</strong>如果方法的返回值是一个函数式接口，我们可以使用Lambda表达式作为结果返回</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Comparator&lt;String&gt;getComparator()&#123;</span><br><span class="line"><span class="keyword">return</span> (s1,s2)-&gt;s1.length(-s2.length();&#125;</span><br></pre></td></tr></table></figure><h4 id="Debug-检查"><a href="#Debug-检查" class="headerlink" title="Debug(检查)"></a>Debug(检查)</h4><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="类和对象-引用类型"><a href="#类和对象-引用类型" class="headerlink" title="类和对象(引用类型)"></a>类和对象(引用类型)</h3><p><strong>类是对现实生活中一类具有共同属性和行为的事物的抽象</strong><br><strong>类的特点：</strong><br><strong>类是对象的数据类型<br>类是具有相同</strong><br><strong>属性和行为的一组对象的集合</strong></p><h4 id="对象的使用"><a href="#对象的使用" class="headerlink" title="对象的使用"></a>对象的使用</h4><p>创建对象：[tou](##<u>*&#x3D;&#x3D;报错事例 ：&#x3D;&#x3D;*</u>)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Phone</span> <span class="variable">p</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br></pre></td></tr></table></figure><p> 使用对象：</p><ol><li>使用成员变量（对象名.变量名）</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">p.brand</span><br></pre></td></tr></table></figure><ol start="2"><li>使用成员方法（对象名.方法名）</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">p.call</span><br></pre></td></tr></table></figure><p>成员变量：类中方法外的变量  局部变量：方法中的变量<br><img src="C:/Users/23287/AppData/Roaming/Typora/typora-user-images/image-20240710112957591.png" alt="image-20240710112957591"></p><h4 id="private-关键字-权限修饰符"><a href="#private-关键字-权限修饰符" class="headerlink" title="private(关键字):权限修饰符"></a>private(关键字):权限修饰符</h4><p>可以修饰成员（成员变量和成员方法）<br>作用是保护成员不被别的类使用，被orivate修饰的成员只在本类中才能方问<br>针对private修饰的成员变量，如果需要被其他类使用，提供相应的操作<br>提供“”get变量名0”方法，用于&#x3D;&#x3D;获取&#x3D;&#x3D;成员变量的值，方法用public修饰<br>提供“set变量名（参数）”方法，用于&#x3D;&#x3D;设置&#x3D;&#x3D;成员变量的值，方法用public修饰</p><h4 id="this-关键字-：指代同名变量为成员变量"><a href="#this-关键字-：指代同名变量为成员变量" class="headerlink" title="this(关键字)：指代同名变量为成员变量"></a><strong>this</strong>(关键字)：指代同名变量为成员变量</h4><p>1.在本类的成员方法中，访问本类的成员变量。<br>2.在本类的成员方法中，访问本类的另一个成员方法<br>3.在本类的构造方法中，访问本类的另一个构造方法<br>A.this(…)调用也必须是构造方法的第一个语句，唯一一个<br>B.super和this两种构造调用，不能同时使用。</p><h3 id="面向对象特征（封装-继承-多态-抽象）"><a href="#面向对象特征（封装-继承-多态-抽象）" class="headerlink" title="面向对象特征（封装,继承,多态,抽象）"></a>面向对象特征（封装,继承,多态,抽象）</h3><p><strong>1.封装是面向对象编程语言对客观世界的模拟，客观世界里成员变量都是隐藏在对象内部的，外界是无法直接操作的</strong></p><p><strong>2.封装原则<br>将类的某些信息隐藏在类内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问<br>成员变量private,提供对应的getXxx()&#x2F;setXxx()方法</strong></p><p><strong>3.封装好处<br>通过方法来控制成员变量的操作，提高了代码的安全性<br>把代码用方法进行封装，提高了代码的复用性</strong></p><p>多态：创建某种类型的对象</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">dog</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Dog</span>(); <span class="comment">//创建Dog对象为Animal类型的变量引用</span></span><br></pre></td></tr></table></figure><h3 id="继承："><a href="#继承：" class="headerlink" title="继承："></a>继承：</h3><p>public class 子类名extents父类名{}</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Zi</span> <span class="keyword">extends</span> <span class="title class_">Fu</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>Fu:父类(基类、超类)  Zi：子类(派生类)</p><p>继承中子类的特点：子类可以有父类的内容子类还可以有自己特有的内容<br><strong>继承好处：</strong><br>·提高了代码的复用性（多个类相同的成员可以放到同一个类中）<br>提高了代码的维护性（如果方法的代码需要修改，修改一处即可<br><strong>继承弊端：</strong><br>继承让类与类之间产生了关系，类的耦合性增强了，当父类发生变化时子类实现也不得不跟着变化，削弱了子类的独立性</p><h4 id="super："><a href="#super：" class="headerlink" title="super："></a>super：</h4><p>this:代表本类对象的引用<br>super:代表父类存储空间的标识（何以理解为父类对象引用）<br><img src="C:/Users/23287/AppData/Roaming/Typora/typora-user-images/image-20240712151710156.png" alt="image-20240712151710156"></p><h4 id="继承中构造方法的访问特点"><a href="#继承中构造方法的访问特点" class="headerlink" title="继承中构造方法的访问特点:"></a>继承中构造方法的访问特点:</h4><p><strong>子类中所有的构造方法默认都会访问父类中无参的构造方法(父类无参构造方法没有会报错需手动在子类添加super带参数)<br>子类会继承父类中的数据，可能还会使用父类的数据。所以，子类初始化之前，一定要先完成父类数据的初始化<br>·每一个子类构造方法的第一条语句默认都是：super()</strong><br><strong>继承中成员方法的访问特点：</strong></p><p><strong>通过子类对象访问一个方法<br>子类成员范围找<br>父类成员范围找<br>如果都没有就报措（不考虑父亲的父亲.）</strong></p><h4 id="方法重写："><a href="#方法重写：" class="headerlink" title="方法重写："></a>方法重写：</h4><p><strong>方法重写概述<br>·子类中出现了和父类中一模一样的方法声明<br>方法重写的应用<br>·当子类需要父类的功能，而功能主体子类有自己特有内容时，可以重写父类中的方法，这样，即沿袭了父类<br>的功能，又定义了子类特有的内容<br>@Override（注解）<br>可以帮助我们检查重写方法的方法声明的正确性</strong><br><strong>方法重写注意事项<br>&#x3D;&#x3D;私有方法不能被重写&#x3D;&#x3D;（父类私有成员子类是不能继承的）用super 访问其他<br>子类方法访问权限不能更低(public&gt;默认&gt;私有)</strong><br><strong>Java中类只支持单继承，不支持多继承<br>Java中类支持多层继承</strong><br>资源管理器中 建立包：<br>自动：javac -d.HelloWorld.java<br>导包：import包名；</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.itcast.Teacher</span><br></pre></td></tr></table></figure><p>修饰符：<br>1.权限修饰符：</p><p><img src="C:/Users/23287/AppData/Roaming/Typora/typora-user-images/image-20240712220616257.png" alt="image-20240712220616257"></p><p>2.状态修饰符：<br>final(最终)：final修饰的特点</p><p>final修饰成员变量：</p><p>修饰方法：表明该方法是最终方法，不能被重写<br>修饰变量：表明该变量是常量，不能再次被赋值<br><strong>修饰类：表明该类是最终类，不能被继承</strong></p><p>final修饰局部变量：</p><p>变量是基本类型：finl修饰指的是基本类型的数据值不能发生改变<br>变量是引用类型：fil修饰指的是引用类型的<strong>地址值不能发生改变，但是地址里面的内容是可以发生改变的</strong><br> static(静态):可以修饰成员方法，成员变量<br>static修饰的特点<br>被类的所有对象共享<br>这也是我们判断是否使用静态关键字的条件<br><strong>静态成员方法直接访问静态成员但不能直接访问非静态成员</strong></p><h4 id="多态：同一个对象，在不同时刻表现出来的不同形态"><a href="#多态：同一个对象，在不同时刻表现出来的不同形态" class="headerlink" title="多态：同一个对象，在不同时刻表现出来的不同形态"></a>多态：同一个对象，在不同时刻表现出来的不同形态</h4><p>多态的前提和体现 猫cat-new猫();动物animal&#x3D;new 猫();<br>有继承&#x2F;实现关系<br>有方法重写<br>有父类引用指向子类对象<br>多态中成员的访问特点：</p><p>成员变量：编译看左边，执行着左边<br>成员方法：编译看左边，执行看右边<br>多态的好处：提高了程序的扩展性<br>具体体现：定义方法的时候，使用父类型作为参数，将来在使用的时候，使用具体的子类型参与操作<br>多态的弊端：不能使用子类的特有功能<br>多态中的转型：<br>向上转型 从子到父</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Animal a=<span class="keyword">new</span> <span class="title class_">cat</span>;</span><br></pre></td></tr></table></figure><p>父类引用指向子类对象<br>向下转型 从父到子（强转）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cat c=(Cat)a;</span><br></pre></td></tr></table></figure><p>父类引用转为子类对象</p><h4 id="抽象类："><a href="#抽象类：" class="headerlink" title="抽象类："></a>抽象类：</h4><p>在Java中，一个没有方法体的方法应该定义为抽象方法，而类中如果有抽象方法，该类必须定义为抽象类</p><p><strong>抽象类的特点：</strong></p><p>抽象类和抽象方法必须使用abstract关键字修饰<br>public abstract class类名<br>public abstract void eat(）<br>抽象类中不一定有抽象方法，有抽象方法的类一定是抽象类<br>抽象类不能实例化<br>抽象类如何实例化：参照多态的方式，通过子类对象实例化<br>抽象类的子类<br>要么重写抽象类中的所有抽象方法要么是抽象类<br><strong>成员特点</strong>：</p><p>成员变量可以是变量也可以是常量<br>构造方法有构造方法，但是不能实例化<br>构造方法的作用：子类访问父类数据的初始化<br>成员方法<br>可以有抽象方法：限定子类必须完成某些动作<br>也可以有非抽象方法：提高代码复用性</p><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>一种公共的规范标准，只要符合规范标准，大家都可以通用，Java中的接口更多的体现在对行为的抽象<br> <strong>接口特点</strong></p><p>接口用关键字interface修饰<br>public interface接口名<br>类实现接口用implements表示<br>public class类名implements接口名<br>接口不能实例化<br>接口如何实例化呢？参照多态的方式，通过实现类对象实例化，这叫接口多态。<br>多态的形式：具体类多态，抽象类多态，接口多态。<br>多态的前提：有继承或者实现关系；有方法重写；有父类&#x2F;接口)引用指向（子实现）类对象<br>接口的实现类<br>要么重写接口中的所有抽象方法<br>要么是抽象类<br><strong>接口的成员特点：</strong><br><strong>成员变量:只能是常量</strong><br>默认修饰符：public static final<br>构造方法<br>接口没有构造方法，因为接口主要是对行为进行抽象的，是没有具体存在<br>一个类如果没有父类，默认继承自Object类<br>成员方法<br>只能是抽象方法<br>默认修饰符：public abstract<br><strong>类和接口的关系：</strong><br>类和类的关系<br>继承关系，只能单继承，但是可以多层继承<br>类和接口的关系<br>实现关系，可以单实现，也可以多实现，还可以在继承一个类的同时实现多个接口<br>接口和接口的关系<br>继承关系，可以单继承，也可以多继承<br> 抽象类和接口的区别：<br>成员区别<br>抽象类<br>变量，常量；有构造方法；有抽象方法也有非抽象方法<br>接口<br>常量；抽象方法<br>关系区别<br>类与类<br>继承，单继承<br>类与接口<br>实现，可以单实现，也可以多实现<br>接口与接口<br>继承，单继承，多继承<br>方法的形参是类名，其实需要的是该类的对象<br>方法的返回值是类名，其实返回的是该类的对象<br><strong>类名作为形参和返回值</strong><br>方法的形参是类名，其实需要的是该类的对象<br>方法的返回值是类名，其实返回的是该类的对象<br><strong>抽象类名作为形参和返回值：</strong><br>方法的形参是抽象类名，其实需要的是该抽象类的子类对象<br>方法的返回值是抽象类名，其实返回的是该抽象类的子类对象<br><strong>接口名作为形参和返回值：</strong><br>方法的形参是接口名，其实需要的是该接口的实现类对象<br>方法的返回值是接口名，其实返回的是该接口的实现类对象</p><h4 id="接口组成更新："><a href="#接口组成更新：" class="headerlink" title="接口组成更新："></a>接口组成更新：</h4><p>常量抽象方法默认方法 静态方法私有方法<br>默认方法：public可省略默认方法不是抽象方法，所以不强制被重写。但是可以被重写，重写的时候去掉default关键字</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> 方法名()&#123;&#125;</span><br></pre></td></tr></table></figure><p>静态方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名()&#123;&#125;</span><br></pre></td></tr></table></figure><p>接口中静态方法的注意事项：<br>静态方法只能通过接口名调用，不能通过实现类名或者对像名调用<br>public可以省略，static不能省略<br><strong>接口中的私有方法：</strong>(可静态)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> (<span class="keyword">static</span>) <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>接口中私有方法的注意事项：<br>默认方法可以调用私有的静态方法和非静态方法<br>静态方法只能调用私有的静态方法</p><h4 id="函数式接口："><a href="#函数式接口：" class="headerlink" title="函数式接口："></a>函数式接口：</h4><p>函数式接口：有且仅有一个抽象方法的接口<br>Java中的函数式编程体现就是Lambda表达式，所以函数式接口就是可以适用于Lambda使用的接口<br>只有确保接口中有且仅有一个抽象方法，Jva中的Lambda才能顺利地进行推导<br>@Functionallnterface<br>放在接口定义的上方：如果接口是函数式接口，编译通过；如果不是，编译失败<br>如果方法的返回值是一个函数式接口，我们可以使用Lambda表达式作为结果返回<br><strong>常用函数式接口：</strong><br>Supplier：Supplier<T>:包含一个无参的方法<br>Tget():获得结果:<br>该方法不需要参数，它会按照某种实现逻辑（由Lambda表达式实现）返回一个数据<br>Supplier<T>接口也被称为生产型接口，如果我们指定了接口的泛型是什么类型，那么接口中的get方法就会生产什么类<br>型的数据供我们使用<br>Consumer<T>:包含两个方法<br>void accept(Tt):对给定的参数执行此操作<br>default Consumer<T>andThen(Consumer after):返一个组合的Consumer,依次执行此操作，然后执行after操作<br>Consumer<T>接口也被称为消费型接口，它消费的数据的数据类型由泛型指定<br>Predicate接口：常用方法<br>boolean test(Tt):对给定的参数进行判断（判逻辑由Lambda表达式实现），返回一个布尔值<br>default Predicate<T>negate():返回一个逻辑的否定，对应逻辑非<br>default Predicate<T>and(Predicate other):返回一个组合判断，对应短路与<br>default Predicate<T>or(Predicate other):返回一个组合判断，对应短路或</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> pre1.and(pre2).test(s);</span><br></pre></td></tr></table></figure><p>Function接口：</p><p>R apply(Tt):将此函数应用于给定的参数<br>defau作<V>Function andThen(Function after):返回一个组合函数，首先将该函数应用于输入，然后将after函数应用于结果Predicate<T>接口通常用于判断参数是否满足指定的条件</p><h4 id="内部类：-类A中定义一个类B"><a href="#内部类：-类A中定义一个类B" class="headerlink" title="内部类：(类A中定义一个类B)"></a>内部类：(类A中定义一个类B)</h4> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> class类名&#123;</span><br><span class="line">修饰符class 类名&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>访问特点：</strong><br>内部类可以直接访问外部类的成员，包括私有<br>外部类要访问内部类的成员，必须创建对象</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span><span class="number">10</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Inner i=<span class="keyword">new</span> <span class="title class_">Inner</span>;</span><br><span class="line">i.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照内部类在类中定义的位置不同，可以分为如下两种形式<br>在类的成员位置：成员内部类<br>在类的局部位置：局部内部类<br>成员内部类：外界创建对象使用：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Outer.Inneroi=<span class="keyword">new</span> <span class="title class_">Outer</span>().<span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br></pre></td></tr></table></figure><p> 局部内部类：<br>局部内部类是在方法中定义的类，所以外界是无法直接使用，需要在方法内部创建对象并使用<br>该类可以直接访问外部类的成员，也可以访问方法内的局部变量<br>匿名内部类：（注意分号） </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Inner i <span class="keyword">new</span> <span class="title class_">Inner</span>()&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;.show;</span><br></pre></td></tr></table></figure><p>本质：一个继承了该类或者实现了该接口的子类匿名&#x3D;&#x3D;对象&#x3D;&#x3D;</p><h5 id="math-绝对值"><a href="#math-绝对值" class="headerlink" title="math(绝对值)"></a>math(绝对值)</h5><p><img src="C:/Users/23287/AppData/Roaming/Typora/typora-user-images/image-20240715094130133.png" alt="image-20240715094130133"></p><h5 id="System："><a href="#System：" class="headerlink" title="System："></a>System：</h5><p><img src="C:/Users/23287/AppData/Roaming/Typora/typora-user-images/image-20240715095857325.png" alt="image-20240715095857325"></p><p>其他：</p><p>类前面的访问修饰符（如<code>public</code>）决定了该类的可见性和使用范围。如果<code>class Student</code>前没有使用<code>public</code>修饰，这表示该类是一个包级私有的类，它只能被同一个包内的其他类访问和使用。<br>不意味着所有用<code>static</code>修饰的成员都可以直接通过类名访问。访问权限还受到成员访问修饰符（如<code>public</code>、<code>protected</code>、<code>private</code>等）的影响。只有被声明为<code>public</code>的静态成员才可以在类的外部通过类名直接访问。没有构造方法，如何使用类中的成员呢？<br>看类的成员是否都是静态的，如果是，通过类名就可以直接调用<br>Object类(祖宗类)：</p><p> to String  equals<br><img src="C:/Users/23287/AppData/Roaming/Typora/typora-user-images/image-20240715103137706.png" alt="image-20240715103137706"></p><h4 id="Arrays："><a href="#Arrays：" class="headerlink" title="Arrays："></a>Arrays：</h4><p>该类包含用于操作数组的各种方法（如排序和搜索）【该类还包含一个静态工厂，可以将数组视为列表<br><img src="C:/Users/23287/AppData/Roaming/Typora/typora-user-images/image-20240715105455109.png" alt="image-20240715105455109"></p><p>将基本数据类型封装成对象的好处在于可以在对象中定义更多的功能方法操作该数据<br>常用的操作之一：用于基本数据类型与字符串之间的转换<br><img src="C:/Users/23287/AppData/Roaming/Typora/typora-user-images/image-20240715110448137.png" alt="image-20240715110448137"></p><p>Ineger:包装一个对象中原始类型int的值<br><img src="C:/Users/23287/AppData/Roaming/Typora/typora-user-images/image-20240715141718527.png" alt="image-20240715141718527"></p><p>int和String的相互转换：<br>int转换为String<br>public static String valueOf(inti):返回int参数的字符串表示形式。该方法是String类中的方法<br>String转换为int<br>public static in体parselnt(String s):将字符串解析为int类型。该方法是Integer类中的方法<br>自动装箱和拆箱<br>装箱：把基本数据类型转换为对应的包装类类型<br>拆箱：把包装类类型转换为对应的基本数据类型<br>在使用包装类类型的时候，如果做操作，最好先判断是否为ul<br>我们推荐的是，<strong>只要是对象，在使用前就必须进行不为null的判断</strong><br>日期类：<br> <img src="C:/Users/23287/AppData/Roaming/Typora/typora-user-images/image-20240715154328189.png" alt="image-20240715154328189">  </p><h4 id="Data-的常用方法："><a href="#Data-的常用方法：" class="headerlink" title="Data 的常用方法："></a>Data 的常用方法：</h4><p><img src="C:/Users/23287/AppData/Roaming/Typora/typora-user-images/image-20240715154941432.png" alt="image-20240715154941432"></p><p>SimpleDateformat类：<br> 构造方法<img src="C:/Users/23287/AppData/Roaming/Typora/typora-user-images/image-20240715161734782.png" alt="image-20240715161734782"></p><p>方法：Data到String：public final String format（Data data）：将日期格式化成日期&#x2F;时间字符串<br>解析：public Data parse（String source）：从给定字符串的开始解析文本以生成日期<br>创建对象的格式要跟字符串的格式一样<br>Calendar：表示一个时间的日历对象<br>通过genlnstance方法获取对象sex···修改get···获取 add：在原有的基础上进行增加或减少细节点：日历中月份范围：0~11<br>日历中星期的特点：星期日是一周中的第一天中国人习惯的（查表法）</p><p>时区：</p><p><img src="C:/Users/23287/AppData/Roaming/Typora/typora-user-images/image-20240715204220034.png" alt="image-20240715204220034"></p><p>Instant时间戳：<br><img src="C:/Users/23287/AppData/Roaming/Typora/typora-user-images/image-20240715204149781.png" alt="image-20240715204149781"></p><p>isBefore()isAfter()<br><img src="C:/Users/23287/AppData/Roaming/Typora/typora-user-images/image-20240715205624434.png" alt="image-20240715205624434"></p><h4 id="异常：（crtl-alt-T）"><a href="#异常：（crtl-alt-T）" class="headerlink" title="异常：（crtl alt+T）"></a>异常：（crtl alt+T）</h4><p> 程序中可能出现的问题<br>最上层父类是Exception分为编译时异常和运行时异常<br>区别：前者没有RuntimeException的异常，直接继承于Exception 编译阶段没有错误提示<br>运行时异常:RuntimeException本身和子类 编译阶段没有错误提示，运行时才出现的</p><p>区别：编译时异常：除了RuntimeExcpetion和他的子类，其他都是编译时异常<br>编译阶段需要进行处理，作用在于提醒程序员。<br>运行时异常：RuntimeException本身和所有子类，都是运行时异常。<br>编译阶段不报错，是程序运行时出蚬的。<br>一般是由于参数传递错误带来的问题</p><p>作用：异常是用来查询bug的关键参考信息<br>异常可以作为方法内部的一种特殊返回值，以便通知调用者底层的执行情况（多个at从下往上看）<br>JVM默认处理异常的方式：<br>1,把异常的名称，异常原因及异常出现的位置等信息输出在了控制台<br>2.程序停止执行，异常下面的代码不会再执行了<br>捕获异常：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">可能出现异常的代码；</span><br><span class="line">&#125;<span class="keyword">catch</span>（异常类名 变量名）&#123;</span><br><span class="line">异常的处理代码；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="C:/Users/23287/AppData/Roaming/Typora/typora-user-images/image-20240716114645680.png" alt="image-20240716114645680"> </p><p>一：执行try中的不会执行catch中的<br>二： 会写多个catch与之对应<br>细节：<br>如果我们要捕获多个异常，这些异常中如果存在父子关系的话，那么父类一定要写在下面<br>了解性：<br>在JDK7之后，我们可以在catch中同时捕获多个异常，中间用|进行隔开表示如果出现了A异常或者B异常的话，采取同一种处理方案<br> 三：try语法无用了，虚拟机处理<br>四:跳到catch再往下<br>异常中的常见方法：<br><img src="C:/Users/23287/AppData/Roaming/Typora/typora-user-images/image-20240716200218885.png" alt="image-20240716200218885"></p><p>三包含的信息最多</p><p>抛出处理：<br>throws:写在方法定义处表明申明一个异常编译时异常必须要写运行时异常可以不写</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 方法（）<span class="keyword">throws</span> 异常类名<span class="number">1</span>，异常类名<span class="number">2</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>throw:写在方法内，结束方法。手动抛出异常对象，交给调用者。方法中下面的代码不再执行</p><h2 id="异常："><a href="#异常：" class="headerlink" title="异常："></a>异常：</h2><p>空指针异常（NullPointerException）是编程中常见的一种错误，它通常发生在试图访问一个空引用（null reference）的时候，即该引用没有指向任何对象。空指针异常的主要原因可以归纳为以下几点：</p><ol><li><p>未初始化引用：当一个引用变量被声明但没有被初始化时，它的值默认为null。如果在使用该引用前没有对其进行初始化操作，就会抛出空指针异常。例如，在Java中声明了一个String类型的变量但没有为其分配内存空间，然后尝试调用其方法或访问其属性，就会引发空指针异常。</p></li><li><p>对象未被正确实例化：在面向对象编程中，需要先创建一个对象的实例，然后才能通过引用来访问该对象的成员。如果对象没有被正确实例化（即引用被赋值为null），尝试访问其成员也会导致空指针异常。</p></li><li><p>引用被显式赋值为null：有时候，程序员会故意将一个引用赋值为null，表示该引用不再指向任何对象。如果在这种情况下试图访问该引用的成员，同样会抛出空指针异常。</p></li><li><p>方法返回null值：当一个方法声明返回一个对象类型时，有时候该方法会返回null值。如果在调用该方法后直接使用返回值进行操作（如调用其方法或访问其属性），而没有进行非空判断，就有可能导致空指针异常。</p></li><li><p>数组元素未初始化：在使用数组时，如果没有对数组元素进行初始化操作，那么数组中的元素默认为null。如果在访问数组元素之前没有对其进行初始化，也会引发空指针异常。</p></li><li><p>其他间接原因：虽然不直接导致空指针异常，但某些操作可能会间接引起。例如，数组越界（虽然这通常导致的是ArrayIndexOutOfBoundsException，但在某些情况下可能间接导致空指针异常，如访问越界后返回的null对象）</p><p>为了避免空指针异常的发生，程序员在编程时应该注意以下几点：</p><ol><li>在使用引用之前，确保该引用已经被正确地初始化。</li><li>尽量避免将引用赋值为null，在赋值之前检查该引用是否已经指向了一个有效的对象。</li><li>在使用方法的返回值之前，先进行返回值的非空判断。</li><li>在使用数组元素之前，确保数组元素已经被正确地初始化。</li><li>使用Java 8引入的Optional类来优雅地处理可能为null的值。</li><li>进行代码审查，使用IDE的静态代码分析工具来查找潜在的null引用问题。</li><li>通过遵守这些编程规范和使用工具，可以在一定程度上减少空指针异常的发生。</li></ol></li></ol><h2 id="API-应用程序编程接口"><a href="#API-应用程序编程接口" class="headerlink" title="API(应用程序编程接口)"></a>API(应用程序编程接口)</h2><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><p>String类在<strong>java.lang包</strong>下，所以使用的时候<strong>不需要导包</strong><br>String类代表字符串，Java程序中的所有字符串文字（例如“abc”)都被实现为此类的实例<br>也就是说，Java程序中所有的双引号字符串，都是String类的对象</p><h4 id="字符串的特点"><a href="#字符串的特点" class="headerlink" title="字符串的特点"></a>字符串的特点</h4><p>字符串不可变，它们的值在创建后不能被更改<br>虽然String的值是不可变的，但是它们可以被共享<br>字符串效果上相当于字符数组(char)).但是底层原理是字节数组(byte])<br><strong>&#x3D;&#x3D;字符串用加”+”拼接&#x3D;&#x3D;</strong></p><h4 id="String-构造方法："><a href="#String-构造方法：" class="headerlink" title="String 构造方法："></a>String 构造方法：</h4><p><strong>推荐使用直接赋值的方式得到字符串对象</strong></p><p><img src="C:/Users/23287/AppData/Roaming/Typora/typora-user-images/image-20240710174624804.png" alt="image-20240710174624804"></p><h3 id="字符串的比较："><a href="#字符串的比较：" class="headerlink" title="字符串的比较："></a>字符串的比较：</h3><p><strong>使用&#x3D;&#x3D;做比较<br>基本类型：比较的是数据值是否相同<br>引用类型：比较的是地址值是否相同<br>字符串是对象，它比较内容是否相同，是通过一个方法来实现的，这个方法叫：equals()<br>public boolean equals(Object anObject):将此字符串与指定对像进行比较。由于我们比较的是字符串<br>对象，所以参数直接传递一个字符串</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringComparison</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;Hello, World!&quot;</span>;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;Hello, World!&quot;</span>;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Hello, World!&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 使用equals()方法比较str1和str2  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;str1 equals str2: &quot;</span> + str1.equals(str2)); <span class="comment">// 输出 true  </span></span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 使用equals()方法比较str1和str3  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;str1 equals str3: &quot;</span> + str1.equals(str3)); <span class="comment">// 输出 true  </span></span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 演示equals()与==的区别  </span></span><br><span class="line">        <span class="comment">// == 用于比较两个对象的引用是否相同  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;str1 == str2: &quot;</span> + (str1 == str2)); <span class="comment">// 输出 true（对于字符串常量，JVM可能会优化为同一个引用）  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;str1 == str3: &quot;</span> + (str1 == str3)); <span class="comment">// 输出 false（因为str3是new出来的，所以引用不同）  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="遍历字符串"><a href="#遍历字符串" class="headerlink" title="遍历字符串"></a>遍历字符串</h4><p>遍历字符串，首先要能够获取到字符串中的每一个字符<br>●public char charAt(int index):返回指定索处的char值，字符串的索引也是从O开始的(逐个字符遍历)<br>    遍历字符串，其次要能够获取到字符串的长度<br>    public int length():返回此字符串的长度<br>●数组的长度：数组名.length<br>   字符串的长度：字符串对象.length();<br>    遍历字符串的通用格式</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello, World!&quot;</span>;  </span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++) &#123;  </span><br><span class="line">           <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> str.charAt(i);  </span><br><span class="line">           System.out.println(ch);  </span><br><span class="line">       &#125;  </span><br></pre></td></tr></table></figure><p>增强for：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello, World!&quot;</span>;  </span><br><span class="line">       <span class="keyword">for</span> (<span class="type">char</span> ch : str.toCharArray()) &#123;  </span><br><span class="line">           System.out.println(ch);  </span><br><span class="line">       &#125;  </span><br></pre></td></tr></table></figure><p>Java 8引入了Stream API，提供了一种高效且表达力强的方式来处理数据集合（包括字符串）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello, World!&quot;</span>;  </span><br><span class="line">       str.chars() <span class="comment">// 返回一个IntStream，包含字符串中每个字符的Unicode码点  </span></span><br><span class="line">               .forEach(codePoint -&gt; System.out.println((<span class="type">char</span>) codePoint)); <span class="comment">// 将Unicode码点转换回字符并打印 </span></span><br></pre></td></tr></table></figure><h4 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h4><p>String和String Builder的区别：<br>String:内容是不可变的<br>StringBuilder:内容是可变的(对象中的内容是可变的)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br></pre></td></tr></table></figure><p>链式编程：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">sb.append(<span class="string">&quot;Hellow&quot;</span>).append(<span class="string">&quot;world&quot;</span>).append(<span class="string">&quot;java&quot;</span>).append(<span class="number">100</span>);</span><br><span class="line">System.out.priintln(<span class="string">&quot;sb:&quot;</span>+sb)</span><br></pre></td></tr></table></figure><p>反转方法调用：(将字符串的内容反过来)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sb.reverse();</span><br><span class="line">System.out.println(<span class="string">&quot;sb:&quot;</span>+sb)</span><br></pre></td></tr></table></figure><p>String和String Builder的相互转换：</p><p>Stringbuilder转化为String：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s=sb.toString();</span><br></pre></td></tr></table></figure><p>String转化为StringBuilder：(此处s为String类型)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stringbuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>(s);</span><br></pre></td></tr></table></figure><h2 id="集合："><a href="#集合：" class="headerlink" title="集合："></a>集合：</h2><p>集合类的特点：提供一种存储空间可变的存储模型，存储的数据容量可以发生改变<br>Java集合框架主要由两大接口构成：<code>Collection</code>和<code>Map</code>。其中，<code>Collection</code>是一个更基本的接口，它包含了列表（List）、集合（Set）和队列（Queue）等子接口。而<code>Map</code>则是一种将键（Key）映射到值（Value）的对象，一个键可以最多映射到最多一个值。</p><h5 id="ArrayList-也是从0索引开始的"><a href="#ArrayList-也是从0索引开始的" class="headerlink" title="ArrayList:(也是从0索引开始的)"></a>ArrayList<E>:(也是从0索引开始的)</h5><p>可调整大小的数组实现<br><E>:是一种特殊的数据类型，泛型。</p><h5 id="用法："><a href="#用法：" class="headerlink" title="用法："></a>用法：</h5><p>在出现E的地方我们使用引用数据类型替换即可 举例：ArrayList&lt;.String&gt;,ArrayList<Student></p><p>建立对象 添加字符 插入 删除  删除索引处的元素(会返回被删除的元素)  修改索引(返回)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;String&gt;=array <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">array.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">array.add(数字，<span class="string">&quot;插入的字符&quot;</span>)；</span><br><span class="line">array.remove(<span class="string">&quot;字符&quot;</span>)；</span><br><span class="line">array.remove(数字)；</span><br><span class="line">array.set(数字，<span class="string">&quot;字符&quot;</span>);</span><br><span class="line">array.get()</span><br><span class="line">array.size()</span><br></pre></td></tr></table></figure><p> 插入字符后的其余位置上的字符向后移动<br><img src="C:/Users/23287/AppData/Roaming/Typora/typora-user-images/image-20240711155402431.png" alt="image-20240711155402431"></p><h4 id="通用格式遍历："><a href="#通用格式遍历：" class="headerlink" title="通用格式遍历："></a>通用格式遍历：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;array.size();i++)&#123;</span><br><span class="line">    <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span>array.get(i);</span><br><span class="line">    System.out.println(s.getName()+<span class="string">&quot;,&quot;</span>+s.getAge());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>collection：单列集合Map：双列集合<br><img src="C:/Users/23287/AppData/Roaming/Typora/typora-user-images/image-20240717083647463.png" alt="image-20240717083647463"></p><p> Collecttion:单列集合的祖宗接口<br><img src="C:/Users/23287/AppData/Roaming/Typora/typora-user-images/image-20240717083955785.png" alt="image-20240717083955785"></p><p> Collection集合的遍历：用Iterator<br>E next():返回迭代中的下一个元素boolean hasNext(): 如果迭代具有更多元素则返回true<br><strong>LIst：</strong>父（collection0<br>有序集合（序列）精确控制元素插入位置。可以通过整数索引访问元素，并搜索<br>List集合特有方法：<br><img src="C:/Users/23287/AppData/Roaming/Typora/typora-user-images/image-20240717100644214.png" alt="image-20240717100644214"></p><p> 可用get方法加for循环实现遍历</p><p><strong>并发修改异常</strong>：<br>ConcurrentModificationException<br>产生原因<br>●<br>迭代器遍历的过程中，通过集合对象修改了集合中元素的长度，造成了迭代器获取元素中判断预期修改值和实际修改值不一致<br>解决方案<br>·用for循环遍历，然后用集合对象做对应的操作即可<br><strong>列表迭代器：常用方法<br>E next0:返回迭代中的下一个元素<br>boolean hasNext(0:如果迭代具有更多元素，则返回true<br>E previous(0:返回列表中的上一个元素<br>boolean hasPrevious0:如果此列表迭代器在相反方向遍历列表时具有更多元素，则返回true<br>void add(Ee):将指定的元素插入列表</strong></p><p><strong>增强for：</strong><br>增强for:简化数组和Collection集合的遍历<br>实现Iterable接口的类允许其对象成为增强型for语句的目标<br>它是DK5之后出现的，其内部原理是一个Iteratori迭代器<br>增强for的格式<br>格式：<br>for(元素数据类型变量名：数组或者Collection集合){<br>&#x2F;在此处使用变量即可，该变量就是元素</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[]arr=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i:arr)&#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数据结构：栈-队列数组-链表"><a href="#数据结构：栈-队列数组-链表" class="headerlink" title="数据结构：栈 队列数组 链表"></a>数据结构：栈 队列数组 链表</h4><p>List集合常用子类：ArrayList,LinkedList<br>ArrayList:底层数据结构是数组，查询快，增删慢<br>LinkedList:底层数据结构是链表，查询慢，增删快<br><img src="C:/Users/23287/AppData/Roaming/Typora/typora-user-images/image-20240717142837985.png" alt="image-20240717142837985"></p><h4 id="Set集合："><a href="#Set集合：" class="headerlink" title="Set集合："></a>Set集合：</h4><p><strong>Set集合特点：<br>不包含重复元素的集合<br>没有带索引的方法，所以不能使用普通fo循环遍历<br>HashSet:对集合的迭代顺序不作任何保证</strong></p><p> 哈希值：是)DK根据对象的地址或者字符串或者数字算出来的t类型的数值<br>Object类中有一个方法可以获取对象的哈希值<br>public int hashCode():返回对象的哈希码值<br>对象的哈希值特点<br>如果没有重写hashCode方法，不同对象计算出的哈希值是不同的<br>如果已经重写hashcode方法，不同的对象只要属性值相同，计算出的哈希值就是一样的<br>但是在小部分情况下，不同的属性值或者不同的地址值计算出来的哈希值也有可能一样。（哈希碰撞）</p><p><strong>HashSet特点：</strong><br>底层数据结构是哈希表<br>对集合的迭代顺序不作任何保证，也就是说不保证存储和取出的元素顺序一致<br>没有带索引的方法，所以不能使用普通for循环遍历<br>由于是Set集合，所以是不包含重复元素的集合</p><p>底层逻辑：创建一个默认长度16，默认加载因为0.75的数组，数组名table<br>根据元素的哈希值跟数组的长度计算出应存入的位置<br>判断当前位置是否为nul,如果是nu直接存入<br>如果位置不为nul,表示有元素，则调用equals方法比较属性值<br>一样：不存<br>不一样：存入数组，形成链表<br>JDK8以前：新元素存入数组，老元素挂在新元素下面<br>JDK8以后：新元素直接挂在老元素下面<br>DK8以后，当链表长度超过8，而且数组长度大于等于64时自动转换为红黑树<br>如果集合中存储的是自定义对象，必须要重写hashCode和equals<em>方法</em></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> Object.hash(name,age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>LInkedHashSet:</strong></p><p>哈希表和链表实现的Set接口，具有可预测的迭代次序<br>由链表保证元素有序，也就是说元素的存储和取出顺序是一致的<br>由哈希表保证元素唯一，也就是说没有重复的元素<br><strong>TreeSet:</strong><br> 特点：元素有序，这里的顺序不是指存储和取出的顺序，而是按照一定的规则进行排序，具体排序方式取决于构造方法<br>TreeSet0:根据其元素的自然排序进行排序<br>TreeSet(Comparator comparator):根据指定的比较器进行排序<br>没有带索引的方法，所以不能使用普通for循环遍历<br>由于是Set集合，所以不包含重复元素的集合 </p><p> 用TreeSet集合存储自定义对象，无参构造方法使用的是自然排序对元素进行排序的<br>自然排序，就是让元素所属的类实现Comparable接口，重写compareTo(To)方法<br>重写方法时，一定要注意排序规侧必须按照要求的主要条件和次要条件来写</p><p>比较器Comparetor的使用：（内部类）<br>用TreeSet集合存储自定义对象，带参构造方法使用的是比较器排序对元素进行排序的<br>比较器排序，就是让集合构造方法接收Comparator的实现类对像象，重写compare(To1,To2)方法<br>重写方法时，一定要注意排序规则必须按照要求的主要条件和次要条件来写</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TreeSet&lt;Student&gt; ts=<span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;Student&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Student&gt;())&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Student s1,Student s2)</span>&#123;</span><br><span class="line"><span class="type">int</span> num=s1.getAge()-s2.getAge();</span><br><span class="line"><span class="type">int</span> num2=num==<span class="number">0</span>?s1.getName().comparaTo(s2.getName()):num;</span><br><span class="line"><span class="keyword">return</span> num2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>比较器条件：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> num=s2.getSum-s1.getSum();</span><br><span class="line"><span class="type">int</span> num2=num==<span class="number">0</span>?s1.getChinese-s2.getChinese():num;</span><br><span class="line"><span class="type">int</span> num3=num2==<span class="number">0</span>?s1.getName().compareTo(s2.getName()):num2;</span><br><span class="line"><span class="keyword">return</span> num3;</span><br></pre></td></tr></table></figure><p><strong>泛型：</strong>参数化类型：将类型由原来的举铁的类型参数化，然后在使用&#x2F;调用时传入具体的类型<br>这种参数类型可以用在类、方法和接口中，分别被称为泛型类、泛型方法、泛型接口<br>好处：把运行时期的问题提前到了编译期间<br>避免了强制类型转换<br>定义格式：修饰符 class 类名&lt;类型&gt;{}</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Generic</span>&lt;T&gt;&#123;&#125;</span><br></pre></td></tr></table></figure><p>T可为任意标识<br>泛型方法：修饰符&lt;类型&gt;返回值类型 方法名(类型 变量名){}</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>&lt;T&gt;<span class="keyword">void</span> <span class="title function_">show</span><span class="params">(T t)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>泛型接口：修饰符 interface接口名&lt;类型&gt;{}</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Genric</span>&lt;T&gt;&#123;&#125;</span><br></pre></td></tr></table></figure><p>类型通配符：<br>为了表示各种泛型Lst的父类，可以使用类型通配符<br>类型通配符：&lt;？ &gt;<br>List&lt;?&gt;:表示元素类型未知的ist,它的元素可以匹配任何的类型<br>这种带通配符的List仅表示它是各种泛型List的父类，并不能把元素添加到其中<br>类型通配符的上限：&lt;?extends类型&gt;<br>List&lt;?extends Number&gt;:它表示的类型是Number或者其子类型<br>除了可以指定类型通配符的上限，我们也可以指定类型通配符的下限<br>类型通配符下限：&lt;？super类型&gt;<br>List&lt;?super Number&gt;:它表示的类型是Number或者其父类型<br>可变参数：格式：修饰符返回值类型方法名（数据类型.变量名）{}<br>范例：public static int sum(int.a)(}<br>可变参数注意事项<br>这里的变量其实是一个数组<br>如果一个方法有多个参数，包含可变参数，可变参数要放在最后<br>可变参数的使用：返回有指定数组支持的固定大小的列表（Arrays）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt;List&lt;T&gt;asList(T...a):</span><br></pre></td></tr></table></figure><p>List接口中有一个静态方法  返回包含任意数量元素的不可变列表：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt;List&lt;E&gt;of(E...elemrnts):</span><br></pre></td></tr></table></figure><p>Set接口中有一个静态方法（返回一个包含任意数量元素的不可变集合）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt;Set&lt;E&gt;of(E...elements):</span><br></pre></td></tr></table></figure><h4 id="Map"><a href="#Map" class="headerlink" title="Map:"></a>Map:</h4><p>map&lt;T,V&gt;&#x3D;new Hashamap&lt;T,V&gt;</p><p><img src="C:/Users/23287/AppData/Roaming/Typora/typora-user-images/image-20240718082134458.png" alt="image-20240718082134458"></p><p> Map集合获取功能：<br><img src="C:/Users/23287/AppData/Roaming/Typora/typora-user-images/image-20240718083957876.png" alt="image-20240718083957876"></p><p>Map集合的遍历：获取键的集合或者获取键值对对象的集合<br>collections(集合工具类)概述和使用：<br>自然顺序：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collections.sort(list);</span><br></pre></td></tr></table></figure><p>反转reverse  默认随机元shuffle</p><h4 id="file：文件和目录路径名的抽象表示"><a href="#file：文件和目录路径名的抽象表示" class="headerlink" title="file：文件和目录路径名的抽象表示"></a>file：文件和目录路径名的抽象表示</h4><p>:它是文件和目录路径名的抽象表示<br>文件和目录是可以通过File封装成对象的<br>对于Fi而言，其封装的并不是一个真正存在的文件，仅仅是一个路径名而已。它可以是存在的，也可以是不存在的<br>将来是要通过具体的操作把这个路径的内容转换为具体存在的<br> <img src="C:/Users/23287/AppData/Roaming/Typora/typora-user-images/image-20240718141347024.png" alt="image-20240718141347024"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File f1=<span class="keyword">new</span> <span class="title class_">File</span> (<span class="string">&quot;E:\\itcase\\java.txt&quot;</span>);</span><br><span class="line">File f2=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\itcase&quot;</span>,<span class="string">&quot;java.txt&quot;</span>);</span><br><span class="line">File f3=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E\\itcase&quot;</span>);</span><br><span class="line">File f4=<span class="keyword">new</span> <span class="title class_">File</span>(f3,<span class="string">&quot;java.txt&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>根据调用的方法明来判断文件最终的类型</strong><br>createNewFile() :创建文件<br>mkdir:创建文件<br>mkdirs:可创建多级文件<br>delete：删除文件&#x2F;目录(要删目录需要把目录下的文件都删除)</p><p><strong>FiLe类的判断和获取功能：</strong><br>public boolean isDirectory():测试此抽象路径名表示的FiLe是否为目录<br>public boolean<br>isFile():测试此抽象路径名表示的FiLe是否为文件<br>public boolean exists():测试此抽象路径名表示的FiLe是否存在<br>public String getAbsolutePath():返回此抽象路径名的绝对路径名字符串<br>public String getPath():将此抽象路径名转换为路径名字符串<br>public String getName():返回由此抽象路径名表示的文件或目录的名称<br>public String[]List():返回此抽象路径名表示的目录中的文件和目录的名称字符串数组<br>public File[]listFiles():返回此抽象路径名表示的目录中的文件和目录的File对象数组<br><strong>递归：方法定义中调用方法本身的现象</strong><br>递归出口：否则会出现内存溢出<br>递归规侧：与原问题相似的规模较小的问题</p><h4 id="IO流："><a href="#IO流：" class="headerlink" title="IO流："></a>IO流：</h4><p>IO:输入&#x2F;输出(Input&#x2F;Output)<br>流：是一种抽象概念，是对数据传输的总称。也就是说数据在设备间的传输称为流，流的本质是数据传输<br>O流就是用来处理设备间数据传输问题的<br>常见的应用：文件复制；文件上传；文件下载<br>如果数据通过Window自带的记事本软件打开，我们还可以读懂里面的内容，就使用字符流<br>否则使用字节流。如果你不知道该使用哪种类型的流，就使用字节流<br>InputStream:这个抽象类是表示字节输入流的所有类的超类<br>OutputStream:这个抽象类是表示字节输出流的所有类的超类<br>子类名特点：子类名称都是以其父类名作为子类名的后缀</p><h4 id="字节流："><a href="#字节流：" class="headerlink" title="字节流："></a>字节流：</h4><p>使用字节输出流写数据的步骤：<br>FileOutputStream(name):创建文件输出流已制定的名称写入文件</p><p>创建字节输出流对象（调用系统充功能创建了文件，创建字节输出流对象，让字节输出流对象指向文件）<br>调用字节输出流对象的写数据方法<br>释放资源（关闭此文件输出流并释放与此流相关联的任何系统资源（fos.close();）<br><img src="C:/Users/23287/AppData/Roaming/Typora/typora-user-images/image-20240718170348721.png" alt="image-20240718170348721"></p><p><strong>换行：</strong>window:\r\nlinux:\nmac:\r</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">fos.write(<span class="string">&quot;\r\n&quot;</span>.getBytes());</span><br></pre></td></tr></table></figure><p>追加写入：(加true从文件末尾写入不加从开头写入)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FileOutputStream fos=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;文件地址&quot;</span>,append:<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p><strong>字节流写数据加异常处理：</strong></p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">异常代码;</span><br><span class="line">&#125;<span class="keyword">catch</span>（异常类名 变量名）&#123;</span><br><span class="line">异常的处理代码；</span><br><span class="line">&#125;finall&#123;</span><br><span class="line">执行清楚操作;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>字节流读取数据：</strong>采用循环多次读取fis.close();一定要释放资源！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">fis.read()</span><br></pre></td></tr></table></figure><p> 字节缓冲流：<br>BufferOutputStream:该类实现缓冲输出流。通过设置这样的输出流，应用程序可以向底层输出流写入字节，而不必<br>为写入的每个字节导致底层系统的调用<br>BufferedInputStream:创建BufferedInputStream将创建一个内部缓冲区数组。当从流中读取或跳过字节时，内部缓<br>冲区将根据需要从所包含的输入流中重新填充，一次很多字节</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BufferedOutputStream bos=<span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>)</span><br></pre></td></tr></table></figure><h4 id="字符流：字节流加编码表"><a href="#字符流：字节流加编码表" class="headerlink" title="字符流：字节流加编码表"></a>字符流：字节流加编码表</h4><p>一个汉字存储：<br>如果是GBK编码，占用2个字节<br>如果是UTF-8(万国码)编的，占用3个字节<br>编码解码问题：编码：byte[]getBytes0：使用平台的默认字符集将该String编码为一系列字节，将结果存储到新的字节数组中<br>byte[]getBytes(String charsetName):使用指定的字符集将该String编码为一系列字节，将结果存储<br>到新的字节数组中<br>解码：String(byte]bytes):通过使用平台的默认字符集解码指定的字节数组来构造新的String<br>String(byte[]bytes,,String charsetName):通过指定的字符集解码指定的字节数组来构造新的String<br>字符流写数据的5种方式：<br><img src="C:/Users/23287/AppData/Roaming/Typora/typora-user-images/image-20240718215916113.png" alt="image-20240718215916113"></p><p> 字符流要刷新：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">osw.flush();</span><br></pre></td></tr></table></figure><p><strong>复制改进（转换流）：</strong></p><p> FileReaderFileWriter<br>字符缓冲流（常用）：BufferedReaderBufferedWriter </p><p><strong>特点：</strong><br> BufferedWriter:<br>void newLine0:写一行行分隔符，行分隔符字符串由系统属性定义<br>BufferedReader:<br>public String readLine(0:读一行文字。结果包含行的内容的字符串，不包括任何行终止字符，如果流<br>的结尾已经到达，则为null<br><strong>IO流小结：</strong></p><p> <img src="C:/Users/23287/AppData/Roaming/Typora/typora-user-images/image-20240719102042075.png" alt="image-20240719102042075"></p><p> 字节流可以复制任意文件数据，一般采用缓冲流一次读取一个字节数组的模式。<br><img src="C:/Users/23287/AppData/Roaming/Typora/typora-user-images/image-20240719102356074.png" alt="image-20240719102356074"></p><p> 编码解码就只能InputStreamReader 和OutputStreamWriter<br><strong>集合到文件：文件到集合</strong><br>复制文件夹<br>异常处理：try   catch<br>特殊操作流<br>标准输入流(读取的为键盘输入)：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span>System.in;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BufferedReader br <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br></pre></td></tr></table></figure><p> (可读取字符并能实现整行读取)<br>标准输出流<br>字符打印流</p><h4 id="对象序列化流："><a href="#对象序列化流：" class="headerlink" title="对象序列化流："></a>对象序列化流：</h4><p>对象序列化：就是将对象保存到磁盘中，或者在网络中传输对象<br>这种机制就是使用一个字节序列表示一个对象，该字节序列包含：对象的类型、对象的数据和对象中存储的属性等信息<br>字节序列写到文件之后，相当于文件中持久保存了一个对象的信息<br>对象序列化流：ObjectOutputStream<br>对象反序列化流：ObjectInputStream<br>一个对象要想被序列化，该对象所属的类必须必须实现Serializable接口<br>Serializable是一个标记接口，实现该接口，不需要重弯任何方法 </p><h4 id="对象反序列化流："><a href="#对象反序列化流：" class="headerlink" title="对象反序列化流："></a>对象反序列化流：</h4><p>ObjectlnputStream</p><p>)ObjectInputStream&#x2F;反序列化先前使用DbjectOutputStream编写的原始数据和对象<br>构造方法：<br>ObjectInputStream(InputStream in):创建从指定的InputStreami读取的ObjectlnputStreamObject readObject(0:从DbjectlnputStream读取一个对象</p><p>给对象所属类加一个值就可以使我们修改对象所属的类文件读取数据不会出问题</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> serialVersionUID=<span class="number">42L</span>;</span><br></pre></td></tr></table></figure><p> 对象中有成员变量不想序列化：用transient修饰<br>properties：作为Map的集合的使用但是是非泛型类<br><img src="C:/Users/23287/AppData/Roaming/Typora/typora-user-images/image-20240719212610119.png" alt="image-20240719212610119"></p><p>properties与IO流：<br><img src="C:/Users/23287/AppData/Roaming/Typora/typora-user-images/image-20240719214349762.png" alt="image-20240719214349762"></p><h4 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流:"></a>Stream流:</h4><p>生成方式：Collection体系的集合可以使用默认方法strem(:生成流）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">Stream&lt;String&gt;listStream=list.stream();</span><br><span class="line">Set&lt;String&gt; set=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line">Stream&lt;String&gt;setStream=set.stream();</span><br></pre></td></tr></table></figure><p>Map体系的集合间接的生成流<br>数组可以通过Stream接口的静态方法ofT.values)生成流<br>常见中间操作方法：filter limit skip contant  distinct<br>Stream<T>filter(Predicate predicate):用于对流中的数据进行过滤<br>Predicate接口中的方法<br>boolean test(Tt):对给定的参数进行判断，返回一个布尔值<br>Stream<T>limit(long maxSize):返回此流中的元素组成的流，截取前指定参数个数的数据<br>Stream<T>skip(long n):跳过指定参数个数的数据，返回由该流的剩余元素组成的流<br>static<T>Stream<T>concat(Stream a,Stream b):合并a和b两个流为一个流<br>Stream<T>distinct0:返回由该流的不同元素（根据Dbject.equals(Object))组成的流</p><p>Stream<T>sorted():返回由此流的元素组成的流，根据自然顺序排序<br>Stream<T>sorted(Comparator comparator):返回由该流的元素组成的流，根据提供的Comparator进行排序<br>Comparator接口中的方法int compare(Tol,To2)<br><R>Stream<R>map(Function mapper):返回由给定函数应用于此流的元素的结果组成的流<br>Function接口中的法<br>R apply(Tt)<br>IntStream mapTolnt(TolntFunction mapper):返▣一个IntStream:其中包含将给定函数应用于此流的元素的结果<br>IntStream:表示原始int流<br>TolntFunction接口中的方法<br>int applyAsInt(T value)<br>Stream流的常见终结操作方法<br>void forEach(Consumer action):对此流的每个元素执行操作<br>Consumer接口中的方法<br>void accept(Tt):对给定的参数执行此操作<br>long count(0:返回此流中的元素数<br> Streami流的收集方法<br>R collect(Collector collector)<br>工具类Col川lectors提供了具体的收集方式<br>public static<T>ollector toList(0:把元素收集到List集合中<br>publicstatic<T>Collector toSet0:把元素收集到Set集合中<br>public static Collector toMap(Function keyMapper,,Function valueMapper):把元素收集到Map集合中</p><h4 id="线程："><a href="#线程：" class="headerlink" title="线程："></a>线程：</h4><p>线程是操作系统能够进行运算调度的最小单位包含在进程中，是进程中的实际运作单位。<br>并发：在同一时刻，有多个指令在单个cpu上交替执行<br>并行：在同一时刻，有多个指令在单个cpu上同时执行</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread t=<span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line">t.start();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(r).start();<span class="comment">//上式合并</span></span><br></pre></td></tr></table></figure><p>实现方式：<br>1.继承Thread类的方式进行实现<br>2.实现Runnable接口的方式进行实现<br>3.利用Callable接口和Future接口方式实现<br><img src="C:/Users/23287/AppData/Roaming/Typora/typora-user-images/image-20240720091130356.png" alt="image-20240720091130356"></p><p> 线程调度：<br>分时调度模型：所有线程轮流使用CPU的使用权，平均分配每个线程占用CPU的时间片<br>抢占式调度模型：优先让优先级高的线程使用CPU,如果线程的优先级相同，那么会随机选择一个，优先级高的线程<br>获取的CPU时间片相对多一些<br>设置优先级(有范围)：线程优先级高仅仅表示线程获取的CPU时间片的几高，但是要在次数处比较多，或者多次运行的时候才能看到你想要的效果。线程默认优先级是5；线程优先级的范围是：1-10<br><img src="C:/Users/23287/AppData/Roaming/Typora/typora-user-images/image-20240720094416148.png" alt="image-20240720094416148"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">对象名.setPriority(数字)；</span><br></pre></td></tr></table></figure> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">对象名.getPriority();</span><br></pre></td></tr></table></figure><p> 线程控制： sleep join  setDaemon(守护线程 )<br>设置主线程：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread.currentThread().setName</span><br></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">对象名.setDaemon(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>线程同步：   多线程用那个同步带码块解决<br>同步代码块：<br>锁多条语句实现同步代码块但会降低效率</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(任意对象)&#123;</span><br><span class="line">多条语句共享数据的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同步方法：把synchronized加到方法上而同步方法的锁为this<br>同步静态(与类相关)方法加锁：类名.class<br>线程安全：StringBuffer(多使用)VectorHashtable<br>Lock锁：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">lock.lock();lock.unlock();</span><br></pre></td></tr></table></figure><p>生产者消费者：<br>void wait() 导致当前线程等待，直到另一个线程调用该对象的notify()方法或notifyAll()方法<br>notify()唤醒单个线程<br>notifyAll()唤醒多个线程</p><h2 id="网络编程："><a href="#网络编程：" class="headerlink" title="网络编程："></a>网络编程：</h2><p>三要素：ip地址端口协议</p><p>ipv4：点分十进制，ipv6：冒分十六进制<br>InetAddress：表示互联网协议地址</p><p>localhost（127.0.0.1）：是回送地址也称本地回环地址，也称本机P，永远只会寻找当前所在本机<br>Cmd命令：ipconfig:查看本机lP地址，ping:检查网络是否连通</p><p>端口：设备程序的唯一标识</p><p>端口号：由两个字节表示的整数，取值范围：0<del>65535<br>其中0</del>1023之间的端口号用于一些知名的网络服务或者应用<br>我们自己使用1024以上的端口号就可以了。<br>一个端口只能被一个应用程序使用</p><p>协议： UDP协议：用户数据报协议(User Datagram Protocol))UDP是面向无连接通信协议。速度快，有大小限制一次最多发送64K,数据不安全，易丢失数据<br>TCP协议 ：传输控制协议TCP(Transmission Control Protocol)TCP协议是面向连接的通信协议。速度慢，没有大小限制，数据安全。</p><p>三种通信方式：<br>单播</p><p>组播：MulticastSocket发送到组播地址组播地址：224.0.0.0<del>239.255.255.255其中224.0.0.0</del>224.0.0.255为预留的组播地址</p><p>广播：广播地址255.255.255.255</p><h4 id="UDP："><a href="#UDP：" class="headerlink" title="UDP："></a>UDP：</h4><p> 发送数据的步骤：<br>创建发送端的Socket对象(DatagramSocket)<br>创建数据，并把数据打包<br>调用DatagramSocket对象的方法发送数据<br>关闭发送端</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DatagramPzcket dp=<span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bys,bys.length,INetAddress.getByName(<span class="string">&quot;&quot;</span>),port的值)；</span><br><span class="line">send（变量名）</span><br></pre></td></tr></table></figure><p>把某个数据发送到某个ip的某个端口</p><p>接收数据：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;数据为&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(dp.getData(),<span class="number">0</span>,dp.getLength));</span><br></pre></td></tr></table></figure><h4 id="TCp："><a href="#TCp：" class="headerlink" title="TCp："></a>TCp：</h4><p>TCP通信(io流的形式)：三次握手，三次握手四次挥手<br>注意：读数据的方法是阻塞式的，自定义结束标记或者使用shutdownOutput()方法(推荐)</p><h4 id="Lambda："><a href="#Lambda：" class="headerlink" title="Lambda："></a>Lambda：</h4><p>三要素：形式参数、箭头、代码块</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;多线程启动了&quot;</span>);</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure><p>格式：(形式参数)—&gt;{代码块}<br>():里面没有内容，可以看成是方法形式参数为空<br>-&gt;:用箭头指向后面要做的事情<br>{}:包含一段代码，我们称之为代码块，可以看成是方法体中的内容<br><strong>使用前提：有一个接口且接口中有且仅有一个抽象方法</strong><br><strong>省略规则：</strong><br>参数类型可以省略。但是有多个参数的情况下，不能只省略一个<br>如果参数有且仅有一个，那么小括号可以省略<br>如果代码块的语句只有一条，可以省略大括号和分号，甚至是return<br><strong>注意事项：</strong><br>使用Lambda必须要有接口，并且要求接口中有且仅有一个抽象方法<br>必须有上下文环境，才能推导出Lambda对应的接口<br>根据局部变量的赋值得知Lambda对应的接口：Runnable r&#x3D;()-&gt;System.out.printin(“Lambda表达式”)；<br>根据调用方法的参数得知Lambda对应的接口：new Thread(()-&gt;System.out.println(‘Lambda表达式”).start();<br>Lambda表达式与内部类的区别：<br>所需类型不同<br>匿名内部类：可以是接口，也可以是抽象类，还可以是具体类<br>Lambda表达式：只能是接口<br>使用限制不同<br>如果接口中有且仅有一个抽象方法，可以使用Lambda表达式，也可以使用匿名内部类<br>如果接口中多于一个抽象方法，只能使用匿名内部类，而不能使用Lmbd表达式<br>实现原理不同<br>匿名内部类：编译之后，产生一个单独的.clss字节码文件<br>Lambda表达式：编译之后，没有一个单独的.clss字节码文件。对应的字节码会在运行的时候动态生成</p><h4 id="反射："><a href="#反射：" class="headerlink" title="反射："></a>反射：</h4><p>类加载器、  类加载器的作用<br>负责将.class文件加载到内存中，并为之生成对应的java.lang.Class对象<br>虽然我们不用过分关心类加载机制，但是了解这个机制我们就能更好的理解程序的运行<br>ClassLoade:是负责加载类的对象<br>ClassLoader中的两个方法<br>static ClassLoader getSystemClassLoader0:返回用于委派的系统类加载器<br>ClassLoader getParent():返回父类加载器进行委派<br>反射允许对成员变量，成员方法和构造方法的信息进行编程访问(获取class  获取字段Fie获取构造方法Constr获取成员方法Method)<br>获取class对象：<br>实用类的class属性来获取该类对应的Class对象。Student.class<br>调用对象的getClass()方法，返回对象所属类对应的Class对象该方法是Object类中的方法<br>使用Java中的Class类中的静态方法forName(String className)需要传入字符串参数为某个类的全路径</p><p>模块化：模块下创建module-info.java的文件exports包名requires模块名(AlT+Enter)</p><p>代理：代理可以无侵入式的给对象增强其他的功能<br>代理里面就是对象要被代理的方法<br>通过接口保证，后面的对象和代理需要实现同一个接口<br>接口中就是被代理的所有方法</p><p>​       </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Markdowm入门</title>
      <link href="/2024/09/27/markdown%E5%85%A5%E9%97%A8/"/>
      <url>/2024/09/27/markdown%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="markdown入门"><a href="#markdown入门" class="headerlink" title="markdown入门"></a>markdown入门</h2><p>1.大(直接enter)小(shift+enter)换行<br>2.分割线—加回车<br>3.文字显示：<br><strong>粗体</strong> <del>删除线</del> <u>下划线</u> <em>斜体</em>  <strong><u>ok</u></strong>   &#x3D;&#x3D;高亮&#x3D;&#x3D;     用斜线\把隐藏的符号表示出来<br>4.上下标：上标^ 下标<del>（两个）x^2^  H</del>2~o<br>5.列表<br>无序列表：</p><ul><li><p><input disabled="" type="checkbox"> </p></li><li></li><li></li><li></li><li></li><li><p>+<br>  + </p><ul><li></li></ul></li></ul><p>1.<br>2. </p><p>   + </p><p>3. </p><p>任务列表：</p><ul><li><input checked="" disabled="" type="checkbox"> <ul><li><input disabled="" type="checkbox"> <ul><li>[ ]</li></ul></li></ul></li></ul><p>区块显示：</p><blockquote></blockquote><p>代码显示：<code>int</code></p><p>代码块：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/">跳转哔哩哔哩</a></p><p><a href="https://www.bilibili.com/">哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p><p><a href="##markdown%E5%85%A5%E9%97%A8">头</a></p><p>文字说明<a href="%E8%A7%A3%E9%87%8A%E8%AF%B4%E6%98%8E%3Cbr%3E%E8%A7%A3%E9%87%8A%E6%8D%A2%E8%A1%8C%E4%BA%86">^1</a></p><p>图片插入： <img src="/"></p><p>src&#x3D;””表示路径   align&#x3D;”left&#x2F;right”表示左&#x2F;右对齐</p><p>表格(推荐ctrl加t)</p><table><thead><tr><th></th><th>tab</th><th>tab</th></tr></thead><tbody><tr><td></td><td></td><td>enter</td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p>数学公式</p><p>表情符号：😊</p><p>URL:<a href="https://www.bilibili.com/video/BV1h84y1Y7nn/?spm_id_from=333.1007.top_right_bar_window_history.content.click&vd_source=7d2fba46a0d0ef6ff7c7b6de0bd10fe3">【Typora 教程】手把手教你如何用Typora撰写笔记_哔哩哔哩_bilibili</a>来学习</p><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=607133407&bvid=BV1h84y1Y7nn&cid=950020940&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><p>URL:<a href="https://www.bilibili.com/video/BV1JA411h7Gw/?spm_id_from=333.337.search-card.all.click&vd_source=7d2fba46a0d0ef6ff7c7b6de0bd10fe3">8分钟让你快速掌握Markdown_哔哩哔哩_bilibili</a>来复习检查</p><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=327623069&bvid=BV1JA411h7Gw&cid=171385214&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习感悟</title>
      <link href="/2024/09/13/hello-world/"/>
      <url>/2024/09/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>一句hello world！ </p><h1 id="梦开始了"><a href="#梦开始了" class="headerlink" title="梦开始了"></a>梦开始了</h1><h2 id="初入校园"><a href="#初入校园" class="headerlink" title="初入校园"></a>初入校园</h2><p>Hexo：<a href="https://hexo.io/docs/one-command-deployment.html">https://hexo.io/docs/one-command-deployment.html</a><br>github：<a href="https://github.com/">https://github.com/</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
